/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

#line 134 "/usr/include/bits/types.h"
typedef unsigned long __dev_t;
#line 135 "/usr/include/bits/types.h"
typedef unsigned int __uid_t;
#line 136 "/usr/include/bits/types.h"
typedef unsigned int __gid_t;
#line 137 "/usr/include/bits/types.h"
typedef unsigned long __ino_t;
#line 139 "/usr/include/bits/types.h"
typedef unsigned int __mode_t;
#line 140 "/usr/include/bits/types.h"
typedef unsigned long __nlink_t;
#line 141 "/usr/include/bits/types.h"
typedef long __off_t;
#line 149 "/usr/include/bits/types.h"
typedef long __time_t;
#line 164 "/usr/include/bits/types.h"
typedef long __blksize_t;
#line 169 "/usr/include/bits/types.h"
typedef long __blkcnt_t;
#line 120 "/usr/include/time.h"
struct timespec {
   __time_t tv_sec ;
   long tv_nsec ;
};
#line 84 "/usr/include/sys/stat.h"
typedef __uid_t uid_t;
#line 43 "/usr/include/bits/stat.h"
struct stat {
   __dev_t st_dev ;
   __ino_t st_ino ;
   __nlink_t st_nlink ;
   __mode_t st_mode ;
   __uid_t st_uid ;
   __gid_t st_gid ;
   int __pad0 ;
   __dev_t st_rdev ;
   __off_t st_size ;
   __blksize_t st_blksize ;
   __blkcnt_t st_blocks ;
   struct timespec st_atim ;
   struct timespec st_mtim ;
   struct timespec st_ctim ;
   long __unused[3] ;
};
#line 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h"
typedef unsigned long size_t;
#line 29 "/usr/include/bits/sigset.h"
struct __anonstruct___sigset_t_5 {
   unsigned long __val[1024UL / (8UL * sizeof(unsigned long ))] ;
};
#line 29 "/usr/include/bits/sigset.h"
typedef struct __anonstruct___sigset_t_5 __sigset_t;
#line 38 "/usr/include/sys/select.h"
typedef __sigset_t sigset_t;
#line 209 "/usr/include/sys/stat.h"
extern  __attribute__((__nothrow__)) int stat(char const   * __restrict  __file ,
                                              struct stat * __restrict  __buf )  __attribute__((__nonnull__(1,2))) ;
#line 43 "/usr/include/bits/errno.h"
extern  __attribute__((__nothrow__)) int *__errno_location(void)  __attribute__((__const__)) ;
#line 127 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict  __dest , char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
#line 130
extern  __attribute__((__nothrow__)) char *strncpy(char * __restrict  __dest , char const   * __restrict  __src ,
                                                   size_t __n )  __attribute__((__nonnull__(1,2))) ;
#line 135
extern  __attribute__((__nothrow__)) char *strcat(char * __restrict  __dest , char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
#line 260
extern  __attribute__((__nothrow__)) char *strrchr(char const   *__s , int __c )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 397
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 350 "/usr/include/unistd.h"
extern int close(int __fd ) ;
#line 493
extern  __attribute__((__nothrow__)) int chdir(char const   *__path )  __attribute__((__nonnull__(1))) ;
#line 497
extern  __attribute__((__nothrow__)) int fchdir(int __fd ) ;
#line 507
extern  __attribute__((__nothrow__)) char *getcwd(char *__buf , size_t __size ) ;
#line 695
extern  __attribute__((__nothrow__)) __uid_t geteuid(void) ;
#line 727
extern  __attribute__((__nothrow__)) int seteuid(__uid_t __uid ) ;
#line 73 "/usr/include/fcntl.h"
extern int open(char const   *__file , int __oflag  , ...)  __attribute__((__nonnull__(1))) ;
#line 222 "/usr/include/signal.h"
extern  __attribute__((__nothrow__)) int sigemptyset(sigset_t *__set )  __attribute__((__nonnull__(1))) ;
#line 228
extern  __attribute__((__nothrow__)) int sigaddset(sigset_t *__set , int __signo )  __attribute__((__nonnull__(1))) ;
#line 255
extern  __attribute__((__nothrow__)) int sigprocmask(int __how , sigset_t const   * __restrict  __set ,
                                                     sigset_t * __restrict  __oset ) ;
#line 339 "/usr/include/stdio.h"
extern int printf(char const   * __restrict  __format  , ...) ;
#line 100 "realpath-ok.c"
char *fb_realpath(char const   *path , char *resolved ) ;
#line 109 "realpath-ok.c"
static sigset_t saved_sigmask  ;
#line 110 "realpath-ok.c"
static sigset_t block_sigmask  ;
#line 111 "realpath-ok.c"
static int delaying  ;
#line 112 "realpath-ok.c"
static int init_done  ;
#line 116 "realpath-ok.c"
static void init_mask(void) 
{ int sig ;

  {
  {
#line 120
  init_done = 1;
#line 121
  sigemptyset(& block_sigmask);
#line 122
  sig = 1;
  }
  {
#line 122
  while (1) {
    while_continue: /* CIL Label */ ;
#line 122
    if (sig < 65) {

    } else {
#line 122
      goto while_break;
    }
    {
#line 123
    sigaddset(& block_sigmask, sig);
#line 122
    sig = sig + 1;
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 124
  return;
}
}
#line 128 "realpath-ok.c"
int enable_signaling(void) 
{ int tmp ;
  sigset_t const   * __restrict  __cil_tmp2 ;
  sigset_t *__cil_tmp3 ;
  sigset_t * __restrict  __cil_tmp4 ;

  {
#line 130
  if (delaying != 0) {
    {
#line 131
    delaying = 0;
#line 132
    __cil_tmp2 = (sigset_t const   * __restrict  )(& saved_sigmask);
#line 132
    __cil_tmp3 = (sigset_t *)0;
#line 132
    __cil_tmp4 = (sigset_t * __restrict  )__cil_tmp3;
#line 132
    tmp = sigprocmask(2, __cil_tmp2, __cil_tmp4);
    }
#line 132
    if (tmp < 0) {
#line 134
      return (-1);
    } else {

    }
  } else {

  }
#line 137
  return (0);
}
}
#line 142 "realpath-ok.c"
int delay_signaling(void) 
{ int tmp ;
  sigset_t const   * __restrict  __cil_tmp2 ;
  sigset_t * __restrict  __cil_tmp3 ;

  {
#line 144
  if (init_done == 0) {
    {
#line 145
    init_mask();
    }
  } else {

  }
#line 146
  if (delaying == 0) {
    {
#line 147
    delaying = 1;
#line 148
    __cil_tmp2 = (sigset_t const   * __restrict  )(& block_sigmask);
#line 148
    __cil_tmp3 = (sigset_t * __restrict  )(& saved_sigmask);
#line 148
    tmp = sigprocmask(0, __cil_tmp2, __cil_tmp3);
    }
#line 148
    if (tmp < 0) {
#line 150
      return (-1);
    } else {

    }
  } else {

  }
#line 153
  return (0);
}
}
#line 157 "realpath-ok.c"
char *wu_realpath(char const   *path , char *resolved_path , char *chroot_path ) 
{ char *ptr ;
  char q[46] ;
  size_t tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;
  size_t tmp___3 ;
  size_t tmp___4 ;
  size_t tmp___5 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  char *__cil_tmp15 ;
  unsigned long __cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  char *__cil_tmp18 ;
  char const   *__cil_tmp19 ;
  char const   * __restrict  __cil_tmp20 ;
  char const   * __restrict  __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  char __cil_tmp24 ;
  int __cil_tmp25 ;
  void *__cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  char * __restrict  __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  char *__cil_tmp32 ;
  char const   * __restrict  __cil_tmp33 ;
  char * __restrict  __cil_tmp34 ;
  char const   * __restrict  __cil_tmp35 ;
  unsigned long __cil_tmp36 ;
  unsigned long __cil_tmp37 ;
  char __cil_tmp38 ;
  int __cil_tmp39 ;
  char const   *__cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  char *__cil_tmp43 ;
  char const   *__cil_tmp44 ;
  size_t __cil_tmp45 ;
  char * __restrict  __cil_tmp46 ;
  unsigned long __cil_tmp47 ;
  unsigned long __cil_tmp48 ;
  char *__cil_tmp49 ;
  char const   * __restrict  __cil_tmp50 ;
  void *__cil_tmp51 ;
  unsigned long __cil_tmp52 ;
  unsigned long __cil_tmp53 ;
  char __cil_tmp54 ;
  int __cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  unsigned long __cil_tmp57 ;
  char __cil_tmp58 ;
  int __cil_tmp59 ;
  unsigned long __cil_tmp60 ;
  unsigned long __cil_tmp61 ;
  char __cil_tmp62 ;
  int __cil_tmp63 ;
  char const   *__cil_tmp64 ;
  unsigned long __cil_tmp65 ;
  unsigned long __cil_tmp66 ;
  char *__cil_tmp67 ;
  char const   *__cil_tmp68 ;
  size_t __cil_tmp69 ;
  char * __restrict  __cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  char *__cil_tmp73 ;
  char const   * __restrict  __cil_tmp74 ;
  void *__cil_tmp75 ;
  char const   *__cil_tmp76 ;
  unsigned long __cil_tmp77 ;
  unsigned long __cil_tmp78 ;
  char *__cil_tmp79 ;
  char const   *__cil_tmp80 ;
  size_t __cil_tmp81 ;
  size_t __cil_tmp82 ;
  char * __restrict  __cil_tmp83 ;
  unsigned long __cil_tmp84 ;
  unsigned long __cil_tmp85 ;
  char *__cil_tmp86 ;
  char const   * __restrict  __cil_tmp87 ;
  void *__cil_tmp88 ;

  {
  {
#line 162
  __cil_tmp13 = 0 * 1UL;
#line 162
  __cil_tmp14 = (unsigned long )(q) + __cil_tmp13;
#line 162
  __cil_tmp15 = (char *)__cil_tmp14;
#line 162
  fb_realpath(path, __cil_tmp15);
#line 164
  __cil_tmp16 = 0 * 1UL;
#line 164
  __cil_tmp17 = (unsigned long )(q) + __cil_tmp16;
#line 164
  __cil_tmp18 = (char *)__cil_tmp17;
#line 164
  __cil_tmp19 = (char const   *)__cil_tmp18;
#line 164
  tmp = strlen(__cil_tmp19);
#line 164
  __cil_tmp20 = (char const   * __restrict  )"strlen(q) = %d\n";
#line 164
  printf(__cil_tmp20, tmp);
#line 165
  __cil_tmp21 = (char const   * __restrict  )"q[MAXPATHLEN - 1] = %c\n";
#line 165
  __cil_tmp22 = 45 * 1UL;
#line 165
  __cil_tmp23 = (unsigned long )(q) + __cil_tmp22;
#line 165
  __cil_tmp24 = *((char *)__cil_tmp23);
#line 165
  __cil_tmp25 = (int )__cil_tmp24;
#line 165
  printf(__cil_tmp21, __cil_tmp25);
  }
  {
#line 167
  __cil_tmp26 = (void *)0;
#line 167
  __cil_tmp27 = (unsigned long )__cil_tmp26;
#line 167
  __cil_tmp28 = (unsigned long )chroot_path;
#line 167
  if (__cil_tmp28 == __cil_tmp27) {
    {
#line 168
    __cil_tmp29 = (char * __restrict  )resolved_path;
#line 168
    __cil_tmp30 = 0 * 1UL;
#line 168
    __cil_tmp31 = (unsigned long )(q) + __cil_tmp30;
#line 168
    __cil_tmp32 = (char *)__cil_tmp31;
#line 168
    __cil_tmp33 = (char const   * __restrict  )__cil_tmp32;
#line 168
    strcpy(__cil_tmp29, __cil_tmp33);
    }
  } else {
    {
#line 170
    __cil_tmp34 = (char * __restrict  )resolved_path;
#line 170
    __cil_tmp35 = (char const   * __restrict  )chroot_path;
#line 170
    strcpy(__cil_tmp34, __cil_tmp35);
    }
    {
#line 171
    __cil_tmp36 = 0 * 1UL;
#line 171
    __cil_tmp37 = (unsigned long )(q) + __cil_tmp36;
#line 171
    __cil_tmp38 = *((char *)__cil_tmp37);
#line 171
    __cil_tmp39 = (int )__cil_tmp38;
#line 171
    if (__cil_tmp39 != 47) {
      {
#line 172
      __cil_tmp40 = (char const   *)resolved_path;
#line 172
      tmp___0 = strlen(__cil_tmp40);
#line 172
      __cil_tmp41 = 0 * 1UL;
#line 172
      __cil_tmp42 = (unsigned long )(q) + __cil_tmp41;
#line 172
      __cil_tmp43 = (char *)__cil_tmp42;
#line 172
      __cil_tmp44 = (char const   *)__cil_tmp43;
#line 172
      tmp___1 = strlen(__cil_tmp44);
      }
      {
#line 172
      __cil_tmp45 = tmp___0 + tmp___1;
#line 172
      if (__cil_tmp45 < 46UL) {
        {
#line 173
        __cil_tmp46 = (char * __restrict  )resolved_path;
#line 173
        __cil_tmp47 = 0 * 1UL;
#line 173
        __cil_tmp48 = (unsigned long )(q) + __cil_tmp47;
#line 173
        __cil_tmp49 = (char *)__cil_tmp48;
#line 173
        __cil_tmp50 = (char const   * __restrict  )__cil_tmp49;
#line 173
        strcat(__cil_tmp46, __cil_tmp50);
        }
      } else {
        {
#line 175
        __cil_tmp51 = (void *)0;
#line 175
        return ((char *)__cil_tmp51);
        }
      }
      }
    } else {
      {
#line 177
      __cil_tmp52 = 1 * 1UL;
#line 177
      __cil_tmp53 = (unsigned long )(q) + __cil_tmp52;
#line 177
      __cil_tmp54 = *((char *)__cil_tmp53);
#line 177
      __cil_tmp55 = (int )__cil_tmp54;
#line 177
      if (__cil_tmp55 != 0) {
#line 178
        __cil_tmp56 = 0 * 1UL;
#line 178
        __cil_tmp57 = (unsigned long )(q) + __cil_tmp56;
#line 178
        ptr = (char *)__cil_tmp57;
        {
#line 178
        while (1) {
          while_continue: /* CIL Label */ ;
          {
#line 178
          __cil_tmp58 = *ptr;
#line 178
          __cil_tmp59 = (int )__cil_tmp58;
#line 178
          if (__cil_tmp59 != 0) {

          } else {
#line 178
            goto while_break;
          }
          }
#line 178
          ptr = ptr + 1;
        }
        while_break: /* CIL Label */ ;
        }
        {
#line 179
        __cil_tmp60 = (unsigned long )resolved_path;
#line 179
        __cil_tmp61 = (unsigned long )ptr;
#line 179
        if (__cil_tmp61 == __cil_tmp60) {
#line 179
          goto _L;
        } else {
#line 179
          ptr = ptr - 1;
          {
#line 179
          __cil_tmp62 = *ptr;
#line 179
          __cil_tmp63 = (int )__cil_tmp62;
#line 179
          if (__cil_tmp63 != 47) {
            _L: /* CIL Label */ 
            {
#line 180
            __cil_tmp64 = (char const   *)resolved_path;
#line 180
            tmp___2 = strlen(__cil_tmp64);
#line 180
            __cil_tmp65 = 0 * 1UL;
#line 180
            __cil_tmp66 = (unsigned long )(q) + __cil_tmp65;
#line 180
            __cil_tmp67 = (char *)__cil_tmp66;
#line 180
            __cil_tmp68 = (char const   *)__cil_tmp67;
#line 180
            tmp___3 = strlen(__cil_tmp68);
            }
            {
#line 180
            __cil_tmp69 = tmp___2 + tmp___3;
#line 180
            if (__cil_tmp69 < 46UL) {
              {
#line 181
              __cil_tmp70 = (char * __restrict  )resolved_path;
#line 181
              __cil_tmp71 = 0 * 1UL;
#line 181
              __cil_tmp72 = (unsigned long )(q) + __cil_tmp71;
#line 181
              __cil_tmp73 = (char *)__cil_tmp72;
#line 181
              __cil_tmp74 = (char const   * __restrict  )__cil_tmp73;
#line 181
              strcat(__cil_tmp70, __cil_tmp74);
              }
            } else {
              {
#line 183
              __cil_tmp75 = (void *)0;
#line 183
              return ((char *)__cil_tmp75);
              }
            }
            }
          } else {
            {
#line 186
            __cil_tmp76 = (char const   *)resolved_path;
#line 186
            tmp___4 = strlen(__cil_tmp76);
#line 186
            __cil_tmp77 = 0 * 1UL;
#line 186
            __cil_tmp78 = (unsigned long )(q) + __cil_tmp77;
#line 186
            __cil_tmp79 = (char *)__cil_tmp78;
#line 186
            __cil_tmp80 = (char const   *)__cil_tmp79;
#line 186
            tmp___5 = strlen(__cil_tmp80);
            }
            {
#line 186
            __cil_tmp81 = tmp___4 + tmp___5;
#line 186
            __cil_tmp82 = __cil_tmp81 - 1UL;
#line 186
            if (__cil_tmp82 < 46UL) {
              {
#line 187
              __cil_tmp83 = (char * __restrict  )resolved_path;
#line 187
              __cil_tmp84 = 1 * 1UL;
#line 187
              __cil_tmp85 = (unsigned long )(q) + __cil_tmp84;
#line 187
              __cil_tmp86 = (char *)__cil_tmp85;
#line 187
              __cil_tmp87 = (char const   * __restrict  )__cil_tmp86;
#line 187
              strcat(__cil_tmp83, __cil_tmp87);
              }
            } else {
              {
#line 189
              __cil_tmp88 = (void *)0;
#line 189
              return ((char *)__cil_tmp88);
              }
            }
            }
          }
          }
        }
        }
      } else {

      }
      }
    }
    }
  }
  }
#line 194
  return ((char *)resolved_path);
}
}
#line 206 "realpath-ok.c"
char *fb_realpath(char const   *path , char *resolved ) 
{ struct stat sb ;
  int fd ;
  int rootd ;
  int serrno ;
  char *p ;
  char *q ;
  char wbuf[46] ;
  int resultcode ;
  int *tmp ;
  uid_t userid ;
  __uid_t tmp___0 ;
  int *tmp___1 ;
  int *tmp___2 ;
  uid_t userid___0 ;
  __uid_t tmp___3 ;
  int *tmp___4 ;
  int *tmp___5 ;
  int *tmp___6 ;
  uid_t userid___1 ;
  __uid_t tmp___7 ;
  int *tmp___8 ;
  int *tmp___9 ;
  int *tmp___10 ;
  uid_t userid___2 ;
  __uid_t tmp___11 ;
  int *tmp___12 ;
  int *tmp___13 ;
  int *tmp___14 ;
  char *tmp___16 ;
  uid_t userid___3 ;
  __uid_t tmp___17 ;
  int *tmp___18 ;
  char *tmp___20 ;
  int *tmp___21 ;
  size_t tmp___22 ;
  size_t tmp___23 ;
  int *tmp___24 ;
  size_t tmp___25 ;
  size_t tmp___26 ;
  size_t tmp___27 ;
  int *tmp___28 ;
  uid_t userid___4 ;
  __uid_t tmp___29 ;
  int *tmp___30 ;
  int *tmp___31 ;
  int *tmp___32 ;
  int *tmp___33 ;
  uid_t userid___5 ;
  __uid_t tmp___34 ;
  int *tmp___35 ;
  int *tmp___36 ;
  int __cil_tmp56 ;
  __uid_t __cil_tmp57 ;
  char * __restrict  __cil_tmp58 ;
  char const   * __restrict  __cil_tmp59 ;
  void *__cil_tmp60 ;
  char * __restrict  __cil_tmp61 ;
  char const   * __restrict  __cil_tmp62 ;
  size_t __cil_tmp63 ;
  char *__cil_tmp64 ;
  char const   * __restrict  __cil_tmp65 ;
  char const   *__cil_tmp66 ;
  void *__cil_tmp67 ;
  unsigned long __cil_tmp68 ;
  unsigned long __cil_tmp69 ;
  unsigned long __cil_tmp70 ;
  unsigned long __cil_tmp71 ;
  unsigned long __cil_tmp72 ;
  unsigned long __cil_tmp73 ;
  char __cil_tmp74 ;
  int __cil_tmp75 ;
  char *__cil_tmp76 ;
  char const   * __restrict  __cil_tmp77 ;
  char const   *__cil_tmp78 ;
  char const   * __restrict  __cil_tmp79 ;
  int __cil_tmp80 ;
  __uid_t __cil_tmp81 ;
  char const   *__cil_tmp82 ;
  char const   * __restrict  __cil_tmp83 ;
  char const   * __restrict  __cil_tmp84 ;
  char __cil_tmp85 ;
  int __cil_tmp86 ;
  char const   * __restrict  __cil_tmp87 ;
  struct stat * __restrict  __cil_tmp88 ;
  char const   * __restrict  __cil_tmp89 ;
  int __cil_tmp90 ;
  __uid_t __cil_tmp91 ;
  char const   * __restrict  __cil_tmp92 ;
  struct stat * __restrict  __cil_tmp93 ;
  unsigned long __cil_tmp94 ;
  __mode_t __cil_tmp95 ;
  unsigned int __cil_tmp96 ;
  char const   *__cil_tmp97 ;
  char const   * __restrict  __cil_tmp98 ;
  char const   * __restrict  __cil_tmp99 ;
  int __cil_tmp100 ;
  char const   * __restrict  __cil_tmp101 ;
  __uid_t __cil_tmp102 ;
  char const   *__cil_tmp103 ;
  char const   * __restrict  __cil_tmp104 ;
  unsigned long __cil_tmp105 ;
  unsigned long __cil_tmp106 ;
  char *__cil_tmp107 ;
  char * __restrict  __cil_tmp108 ;
  char const   * __restrict  __cil_tmp109 ;
  char const   * __restrict  __cil_tmp110 ;
  unsigned long __cil_tmp111 ;
  unsigned long __cil_tmp112 ;
  char *__cil_tmp113 ;
  size_t __cil_tmp114 ;
  void *__cil_tmp115 ;
  unsigned long __cil_tmp116 ;
  unsigned long __cil_tmp117 ;
  char const   * __restrict  __cil_tmp118 ;
  int __cil_tmp119 ;
  __uid_t __cil_tmp120 ;
  size_t __cil_tmp121 ;
  void *__cil_tmp122 ;
  unsigned long __cil_tmp123 ;
  unsigned long __cil_tmp124 ;
  char const   * __restrict  __cil_tmp125 ;
  char const   * __restrict  __cil_tmp126 ;
  char *__cil_tmp127 ;
  char __cil_tmp128 ;
  int __cil_tmp129 ;
  char *__cil_tmp130 ;
  char __cil_tmp131 ;
  int __cil_tmp132 ;
  char const   * __restrict  __cil_tmp133 ;
  char const   * __restrict  __cil_tmp134 ;
  char const   * __restrict  __cil_tmp135 ;
  char const   *__cil_tmp136 ;
  unsigned long __cil_tmp137 ;
  unsigned long __cil_tmp138 ;
  char *__cil_tmp139 ;
  char const   *__cil_tmp140 ;
  char const   * __restrict  __cil_tmp141 ;
  size_t __cil_tmp142 ;
  size_t __cil_tmp143 ;
  size_t __cil_tmp144 ;
  size_t __cil_tmp145 ;
  unsigned long __cil_tmp146 ;
  unsigned long __cil_tmp147 ;
  char const   *__cil_tmp148 ;
  unsigned long __cil_tmp149 ;
  unsigned long __cil_tmp150 ;
  char *__cil_tmp151 ;
  char const   *__cil_tmp152 ;
  size_t __cil_tmp153 ;
  size_t __cil_tmp154 ;
  size_t __cil_tmp155 ;
  size_t __cil_tmp156 ;
  char const   * __restrict  __cil_tmp157 ;
  char * __restrict  __cil_tmp158 ;
  char const   * __restrict  __cil_tmp159 ;
  char * __restrict  __cil_tmp160 ;
  unsigned long __cil_tmp161 ;
  unsigned long __cil_tmp162 ;
  char *__cil_tmp163 ;
  char const   * __restrict  __cil_tmp164 ;
  char const   *__cil_tmp165 ;
  char const   * __restrict  __cil_tmp166 ;
  int __cil_tmp167 ;
  __uid_t __cil_tmp168 ;
  char const   * __restrict  __cil_tmp169 ;
  int __cil_tmp170 ;
  __uid_t __cil_tmp171 ;
  void *__cil_tmp172 ;

  {
  {
#line 221
  tmp = __errno_location();
#line 221
  *tmp = 0;
#line 229
  fd = open(".", 0);
#line 231
  tmp___1 = __errno_location();
  }
  {
#line 231
  __cil_tmp56 = *tmp___1;
#line 231
  if (13 == __cil_tmp56) {
    {
#line 232
    tmp___0 = geteuid();
#line 232
    userid = tmp___0;
#line 233
    delay_signaling();
#line 234
    __cil_tmp57 = (__uid_t )0;
#line 234
    seteuid(__cil_tmp57);
#line 242
    fd = open(".", 0);
#line 244
    seteuid(userid);
#line 245
    enable_signaling();
    }
  } else {

  }
  }
#line 250
  if (fd < 0) {
    {
#line 253
    __cil_tmp58 = (char * __restrict  )resolved;
#line 253
    __cil_tmp59 = (char const   * __restrict  )".";
#line 253
    strcpy(__cil_tmp58, __cil_tmp59);
    }
    {
#line 254
    __cil_tmp60 = (void *)0;
#line 254
    return ((char *)__cil_tmp60);
    }
  } else {

  }
  {
#line 266
  __cil_tmp61 = (char * __restrict  )resolved;
#line 266
  __cil_tmp62 = (char const   * __restrict  )path;
#line 266
  __cil_tmp63 = (size_t )45;
#line 266
  strncpy(__cil_tmp61, __cil_tmp62, __cil_tmp63);
#line 267
  __cil_tmp64 = resolved + 45;
#line 267
  *__cil_tmp64 = (char )'\000';
#line 269
  __cil_tmp65 = (char const   * __restrict  )"Before loop resolved = %s\n";
#line 269
  printf(__cil_tmp65, resolved);
  }
  {
#line 272
  __cil_tmp66 = (char const   *)resolved;
#line 272
  q = strrchr(__cil_tmp66, '/');
  }
  {
#line 273
  __cil_tmp67 = (void *)0;
#line 273
  __cil_tmp68 = (unsigned long )__cil_tmp67;
#line 273
  __cil_tmp69 = (unsigned long )q;
#line 273
  if (__cil_tmp69 != __cil_tmp68) {
#line 274
    p = q + 1;
    {
#line 276
    __cil_tmp70 = (unsigned long )resolved;
#line 276
    __cil_tmp71 = (unsigned long )q;
#line 276
    if (__cil_tmp71 == __cil_tmp70) {
#line 277
      q = (char *)"/";
    } else {
      {
#line 279
      while (1) {
        while_continue: /* CIL Label */ ;
#line 280
        q = q - 1;
        {
#line 279
        __cil_tmp72 = (unsigned long )resolved;
#line 279
        __cil_tmp73 = (unsigned long )q;
#line 279
        if (__cil_tmp73 > __cil_tmp72) {
          {
#line 279
          __cil_tmp74 = *q;
#line 279
          __cil_tmp75 = (int )__cil_tmp74;
#line 279
          if (__cil_tmp75 == 47) {

          } else {
#line 279
            goto while_break;
          }
          }
        } else {
#line 279
          goto while_break;
        }
        }
      }
      while_break: /* CIL Label */ ;
      }
#line 282
      __cil_tmp76 = q + 1;
#line 282
      *__cil_tmp76 = (char )'\000';
#line 283
      q = resolved;
    }
    }
    {
#line 286
    __cil_tmp77 = (char const   * __restrict  )"now resolved = %s\n";
#line 286
    printf(__cil_tmp77, resolved);
#line 287
    tmp___2 = __errno_location();
#line 287
    *tmp___2 = 0;
#line 288
    __cil_tmp78 = (char const   *)q;
#line 288
    resultcode = chdir(__cil_tmp78);
#line 290
    __cil_tmp79 = (char const   * __restrict  )"result of chdir(%s) = %d\n";
#line 290
    printf(__cil_tmp79, q, resultcode);
#line 292
    tmp___5 = __errno_location();
    }
    {
#line 292
    __cil_tmp80 = *tmp___5;
#line 292
    if (13 == __cil_tmp80) {
      {
#line 293
      tmp___3 = geteuid();
#line 293
      userid___0 = tmp___3;
#line 294
      delay_signaling();
#line 295
      __cil_tmp81 = (__uid_t )0;
#line 295
      seteuid(__cil_tmp81);
#line 296
      tmp___4 = __errno_location();
#line 296
      *tmp___4 = 0;
#line 297
      __cil_tmp82 = (char const   *)q;
#line 297
      resultcode = chdir(__cil_tmp82);
#line 298
      seteuid(userid___0);
#line 299
      enable_signaling();
      }
    } else {

    }
    }
#line 301
    if (resultcode < 0) {
      {
#line 303
      __cil_tmp83 = (char const   * __restrict  )"Going to err1..\n";
#line 303
      printf(__cil_tmp83);
      }
#line 304
      goto err1;
    } else {

    }
  } else {
#line 308
    p = resolved;
  }
  }
  {
#line 310
  __cil_tmp84 = (char const   * __restrict  )"Dealing with p = %s\n";
#line 310
  printf(__cil_tmp84, p);
  }
  {
#line 313
  __cil_tmp85 = *p;
#line 313
  __cil_tmp86 = (int )__cil_tmp85;
#line 313
  if (__cil_tmp86 != 0) {
    {
#line 314
    tmp___6 = __errno_location();
#line 314
    *tmp___6 = 0;
#line 315
    __cil_tmp87 = (char const   * __restrict  )p;
#line 315
    __cil_tmp88 = (struct stat * __restrict  )(& sb);
#line 315
    resultcode = stat(__cil_tmp87, __cil_tmp88);
#line 317
    __cil_tmp89 = (char const   * __restrict  )"lstat(%s, &sb) = %d\n";
#line 317
    printf(__cil_tmp89, p, resultcode);
#line 319
    tmp___9 = __errno_location();
    }
    {
#line 319
    __cil_tmp90 = *tmp___9;
#line 319
    if (13 == __cil_tmp90) {
      {
#line 320
      tmp___7 = geteuid();
#line 320
      userid___1 = tmp___7;
#line 321
      delay_signaling();
#line 322
      __cil_tmp91 = (__uid_t )0;
#line 322
      seteuid(__cil_tmp91);
#line 323
      tmp___8 = __errno_location();
#line 323
      *tmp___8 = 0;
#line 324
      __cil_tmp92 = (char const   * __restrict  )p;
#line 324
      __cil_tmp93 = (struct stat * __restrict  )(& sb);
#line 324
      resultcode = stat(__cil_tmp92, __cil_tmp93);
#line 325
      seteuid(userid___1);
#line 326
      enable_signaling();
      }
    } else {

    }
    }
#line 329
    if (resultcode == 0) {
      {
#line 375
      __cil_tmp94 = (unsigned long )(& sb) + 24;
#line 375
      __cil_tmp95 = *((__mode_t *)__cil_tmp94);
#line 375
      __cil_tmp96 = __cil_tmp95 & 61440U;
#line 375
      if (__cil_tmp96 == 16384U) {
        {
#line 376
        tmp___10 = __errno_location();
#line 376
        *tmp___10 = 0;
#line 378
        __cil_tmp97 = (char const   *)p;
#line 378
        resultcode = chdir(__cil_tmp97);
#line 380
        __cil_tmp98 = (char const   * __restrict  )"changed dir to %s\n";
#line 380
        printf(__cil_tmp98, p);
#line 381
        __cil_tmp99 = (char const   * __restrict  )"resultcode = %d\n";
#line 381
        printf(__cil_tmp99, resultcode);
#line 382
        tmp___13 = __errno_location();
        }
        {
#line 382
        __cil_tmp100 = *tmp___13;
#line 382
        if (13 == __cil_tmp100) {
          {
#line 383
          tmp___11 = geteuid();
#line 383
          userid___2 = tmp___11;
#line 384
          __cil_tmp101 = (char const   * __restrict  )"had an access error while chdir\'ing to %s\n";
#line 384
          printf(__cil_tmp101, p);
#line 385
          delay_signaling();
#line 386
          __cil_tmp102 = (__uid_t )0;
#line 386
          seteuid(__cil_tmp102);
#line 387
          tmp___12 = __errno_location();
#line 387
          *tmp___12 = 0;
#line 388
          __cil_tmp103 = (char const   *)p;
#line 388
          resultcode = chdir(__cil_tmp103);
#line 389
          seteuid(userid___2);
#line 390
          enable_signaling();
          }
        } else {

        }
        }
#line 392
        if (resultcode < 0) {
          {
#line 394
          __cil_tmp104 = (char const   * __restrict  )"resultcode = %d in S_ISDIR\n";
#line 394
          printf(__cil_tmp104, resultcode);
          }
#line 395
          goto err1;
        } else {

        }
#line 397
        p = (char *)"";
      } else {

      }
      }
    } else {

    }
  } else {

  }
  }
  {
#line 406
  __cil_tmp105 = 0 * 1UL;
#line 406
  __cil_tmp106 = (unsigned long )(wbuf) + __cil_tmp105;
#line 406
  __cil_tmp107 = (char *)__cil_tmp106;
#line 406
  __cil_tmp108 = (char * __restrict  )__cil_tmp107;
#line 406
  __cil_tmp109 = (char const   * __restrict  )p;
#line 406
  strcpy(__cil_tmp108, __cil_tmp109);
#line 407
  __cil_tmp110 = (char const   * __restrict  )"wbuf = %s\n";
#line 407
  __cil_tmp111 = 0 * 1UL;
#line 407
  __cil_tmp112 = (unsigned long )(wbuf) + __cil_tmp111;
#line 407
  __cil_tmp113 = (char *)__cil_tmp112;
#line 407
  printf(__cil_tmp110, __cil_tmp113);
#line 408
  tmp___14 = __errno_location();
#line 408
  *tmp___14 = 0;
#line 410
  __cil_tmp114 = (size_t )46;
#line 410
  tmp___16 = getcwd(resolved, __cil_tmp114);
  }
  {
#line 410
  __cil_tmp115 = (void *)0;
#line 410
  __cil_tmp116 = (unsigned long )__cil_tmp115;
#line 410
  __cil_tmp117 = (unsigned long )tmp___16;
#line 410
  if (__cil_tmp117 == __cil_tmp116) {
#line 410
    resultcode = 0;
  } else {
#line 410
    resultcode = 1;
  }
  }
  {
#line 411
  __cil_tmp118 = (char const   * __restrict  )"getcwd yields resolved = %s\n";
#line 411
  printf(__cil_tmp118, resolved);
#line 421
  tmp___21 = __errno_location();
  }
  {
#line 421
  __cil_tmp119 = *tmp___21;
#line 421
  if (13 == __cil_tmp119) {
    {
#line 422
    tmp___17 = geteuid();
#line 422
    userid___3 = tmp___17;
#line 423
    delay_signaling();
#line 424
    __cil_tmp120 = (__uid_t )0;
#line 424
    seteuid(__cil_tmp120);
#line 425
    tmp___18 = __errno_location();
#line 425
    *tmp___18 = 0;
#line 427
    __cil_tmp121 = (size_t )46;
#line 427
    tmp___20 = getcwd(resolved, __cil_tmp121);
    }
    {
#line 427
    __cil_tmp122 = (void *)0;
#line 427
    __cil_tmp123 = (unsigned long )__cil_tmp122;
#line 427
    __cil_tmp124 = (unsigned long )tmp___20;
#line 427
    if (__cil_tmp124 == __cil_tmp123) {
#line 427
      resultcode = 0;
    } else {
#line 427
      resultcode = 1;
    }
    }
    {
#line 428
    __cil_tmp125 = (char const   * __restrict  )"getcwd gives resultcode = %d\n";
#line 428
    printf(__cil_tmp125, resultcode);
#line 437
    seteuid(userid___3);
#line 438
    enable_signaling();
    }
  } else {

  }
  }
#line 440
  if (resultcode == 0) {
    {
#line 441
    __cil_tmp126 = (char const   * __restrict  )"resultcode was 0, going to err1\n";
#line 441
    printf(__cil_tmp126);
    }
#line 442
    goto err1;
  } else {

  }
  {
#line 448
  __cil_tmp127 = resolved + 0;
#line 448
  __cil_tmp128 = *__cil_tmp127;
#line 448
  __cil_tmp129 = (int )__cil_tmp128;
#line 448
  if (__cil_tmp129 == 47) {
    {
#line 448
    __cil_tmp130 = resolved + 1;
#line 448
    __cil_tmp131 = *__cil_tmp130;
#line 448
    __cil_tmp132 = (int )__cil_tmp131;
#line 448
    if (__cil_tmp132 == 0) {
      {
#line 450
      __cil_tmp133 = (char const   * __restrict  )"rootd = 1\n";
#line 450
      printf(__cil_tmp133);
#line 451
      rootd = 1;
      }
    } else {
      {
#line 454
      __cil_tmp134 = (char const   * __restrict  )"rootd = 0\n";
#line 454
      printf(__cil_tmp134);
#line 455
      rootd = 0;
      }
    }
    }
  } else {
    {
#line 454
    __cil_tmp135 = (char const   * __restrict  )"rootd = 0\n";
#line 454
    printf(__cil_tmp135);
#line 455
    rootd = 0;
    }
  }
  }
  {
#line 457
  __cil_tmp136 = (char const   *)resolved;
#line 457
  tmp___22 = strlen(__cil_tmp136);
#line 457
  __cil_tmp137 = 0 * 1UL;
#line 457
  __cil_tmp138 = (unsigned long )(wbuf) + __cil_tmp137;
#line 457
  __cil_tmp139 = (char *)__cil_tmp138;
#line 457
  __cil_tmp140 = (char const   *)__cil_tmp139;
#line 457
  tmp___23 = strlen(__cil_tmp140);
#line 457
  __cil_tmp141 = (char const   * __restrict  )"strlen(resolved) + strlen(wbuf) + rootd + 1 = %d\n";
#line 457
  __cil_tmp142 = (size_t )rootd;
#line 457
  __cil_tmp143 = tmp___22 + tmp___23;
#line 457
  __cil_tmp144 = __cil_tmp143 + __cil_tmp142;
#line 457
  __cil_tmp145 = __cil_tmp144 + 1UL;
#line 457
  printf(__cil_tmp141, __cil_tmp145);
  }
  {
#line 459
  __cil_tmp146 = 0 * 1UL;
#line 459
  __cil_tmp147 = (unsigned long )(wbuf) + __cil_tmp146;
#line 459
  if (*((char *)__cil_tmp147)) {
    {
#line 460
    __cil_tmp148 = (char const   *)resolved;
#line 460
    tmp___25 = strlen(__cil_tmp148);
#line 460
    __cil_tmp149 = 0 * 1UL;
#line 460
    __cil_tmp150 = (unsigned long )(wbuf) + __cil_tmp149;
#line 460
    __cil_tmp151 = (char *)__cil_tmp150;
#line 460
    __cil_tmp152 = (char const   *)__cil_tmp151;
#line 460
    tmp___26 = strlen(__cil_tmp152);
    }
    {
#line 460
    __cil_tmp153 = (size_t )rootd;
#line 460
    __cil_tmp154 = tmp___25 + tmp___26;
#line 460
    __cil_tmp155 = __cil_tmp154 + __cil_tmp153;
#line 460
    __cil_tmp156 = __cil_tmp155 + 1UL;
#line 460
    if (__cil_tmp156 >= 46UL) {
      {
#line 461
      tmp___24 = __errno_location();
#line 461
      *tmp___24 = 36;
#line 462
      __cil_tmp157 = (char const   * __restrict  )"resolved path too long!\n";
#line 462
      printf(__cil_tmp157);
      }
#line 463
      goto err1;
    } else {

    }
    }
#line 465
    if (rootd == 0) {
      {
#line 466
      __cil_tmp158 = (char * __restrict  )resolved;
#line 466
      __cil_tmp159 = (char const   * __restrict  )"/";
#line 466
      strcat(__cil_tmp158, __cil_tmp159);
      }
    } else {

    }
    {
#line 469
    __cil_tmp160 = (char * __restrict  )resolved;
#line 469
    __cil_tmp161 = 0 * 1UL;
#line 469
    __cil_tmp162 = (unsigned long )(wbuf) + __cil_tmp161;
#line 469
    __cil_tmp163 = (char *)__cil_tmp162;
#line 469
    __cil_tmp164 = (char const   * __restrict  )__cil_tmp163;
#line 469
    strcat(__cil_tmp160, __cil_tmp164);
#line 470
    __cil_tmp165 = (char const   *)resolved;
#line 470
    tmp___27 = strlen(__cil_tmp165);
#line 470
    __cil_tmp166 = (char const   * __restrict  )"after strcat, resolved = %s, strlen(resolved) = %d\n";
#line 470
    printf(__cil_tmp166, resolved, tmp___27);
    }
  } else {

  }
  }
  {
#line 474
  tmp___28 = __errno_location();
#line 474
  *tmp___28 = 0;
#line 478
  resultcode = fchdir(fd);
#line 480
  tmp___31 = __errno_location();
  }
  {
#line 480
  __cil_tmp167 = *tmp___31;
#line 480
  if (13 == __cil_tmp167) {
    {
#line 481
    tmp___29 = geteuid();
#line 481
    userid___4 = tmp___29;
#line 482
    delay_signaling();
#line 483
    __cil_tmp168 = (__uid_t )0;
#line 483
    seteuid(__cil_tmp168);
#line 484
    tmp___30 = __errno_location();
#line 484
    *tmp___30 = 0;
#line 488
    resultcode = fchdir(fd);
#line 490
    seteuid(userid___4);
#line 491
    enable_signaling();
    }
  } else {

  }
  }
#line 493
  if (resultcode < 0) {
    {
#line 494
    tmp___32 = __errno_location();
#line 494
    serrno = *tmp___32;
    }
#line 495
    goto err2;
  } else {

  }
  {
#line 500
  close(fd);
  }
#line 502
  return (resolved);
  err1: 
  {
#line 504
  tmp___33 = __errno_location();
#line 504
  serrno = *tmp___33;
#line 508
  fchdir(fd);
#line 509
  __cil_tmp169 = (char const   * __restrict  )"fchdir(fd) completed\n";
#line 509
  printf(__cil_tmp169);
#line 511
  tmp___35 = __errno_location();
  }
  {
#line 511
  __cil_tmp170 = *tmp___35;
#line 511
  if (13 == __cil_tmp170) {
    {
#line 512
    tmp___34 = geteuid();
#line 512
    userid___5 = tmp___34;
#line 513
    delay_signaling();
#line 514
    __cil_tmp171 = (__uid_t )0;
#line 514
    seteuid(__cil_tmp171);
#line 518
    fchdir(fd);
#line 520
    seteuid(userid___5);
#line 521
    enable_signaling();
    }
  } else {

  }
  }
  err2: 
  {
#line 526
  close(fd);
#line 527
  tmp___36 = __errno_location();
#line 527
  *tmp___36 = serrno;
  }
  {
#line 529
  __cil_tmp172 = (void *)0;
#line 529
  return ((char *)__cil_tmp172);
  }
}
}
