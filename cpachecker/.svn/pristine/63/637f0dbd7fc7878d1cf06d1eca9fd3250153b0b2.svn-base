/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

#line 14 "../versisec/MadWiFi/progs/../lib/stubs.h"
typedef int size_t;
#line 3 "../versisec/MadWiFi/progs/../constants.h"
typedef unsigned int u_int;
#line 4 "../versisec/MadWiFi/progs/../constants.h"
typedef unsigned char u_int8_t;
#line 32 "../versisec/MadWiFi/progs/../lib/stubs.h"
extern void *memcpy(void *dest , void const   *src , size_t n ) ;
#line 71 "/usr/include/assert.h"
extern  __attribute__((__nothrow__, __noreturn__)) void __assert_fail(char const   *__assertion ,
                                                                      char const   *__file ,
                                                                      unsigned int __line ,
                                                                      char const   *__function ) ;
#line 4 "../versisec/MadWiFi/progs/MADWiFiCVE-2006-6332encode_ie_no_sprintf_ok.c"
static u_int encode_ie(void *buf , size_t bufsize , u_int8_t const   *ie , size_t ielen ,
                       char const   *leader , size_t leader_len ) 
{ void *bufend ;
  u_int8_t *p ;
  int i ;
  int tmp ;
  void *__cil_tmp11 ;
  void const   *__cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  u_int8_t *__cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  u_int8_t *__cil_tmp18 ;
  u_int8_t *__cil_tmp19 ;

  {
#line 9
  bufend = buf + bufsize;
#line 16
  if (bufsize < leader_len) {
#line 17
    return (0U);
  } else {

  }
  {
#line 18
  p = (u_int8_t *)buf;
#line 19
  __cil_tmp11 = (void *)p;
#line 19
  __cil_tmp12 = (void const   *)leader;
#line 19
  memcpy(__cil_tmp11, __cil_tmp12, leader_len);
#line 20
  bufsize = bufsize - leader_len;
#line 21
  p = p + leader_len;
#line 23
  i = 0;
  }
  {
#line 23
  while (1) {
    while_0_continue: /* CIL Label */ ;
#line 23
    if (i < ielen) {
#line 23
      if (bufsize > 2) {

      } else {
        goto while_0_break;
      }
    } else {
      goto while_0_break;
    }
    {
#line 33
    __cil_tmp13 = (unsigned long )bufend;
#line 33
    __cil_tmp14 = (unsigned long )p;
#line 33
    if (__cil_tmp14 < __cil_tmp13) {

    } else {
      {
#line 33
      __assert_fail("p < bufend", "../versisec/MadWiFi/progs/MADWiFiCVE-2006-6332encode_ie_no_sprintf_ok.c",
                    33U, "encode_ie");
      }
    }
    }
#line 34
    *p = (unsigned char )'x';
    {
#line 36
    __cil_tmp15 = (unsigned long )bufend;
#line 36
    __cil_tmp16 = p + 1;
#line 36
    __cil_tmp17 = (unsigned long )__cil_tmp16;
#line 36
    if (__cil_tmp17 < __cil_tmp15) {

    } else {
      {
#line 36
      __assert_fail("p+1 < bufend", "../versisec/MadWiFi/progs/MADWiFiCVE-2006-6332encode_ie_no_sprintf_ok.c",
                    36U, "encode_ie");
      }
    }
    }
#line 37
    __cil_tmp18 = p + 1;
#line 37
    *__cil_tmp18 = (unsigned char )'x';
#line 38
    p = p + 2;
#line 39
    bufsize = bufsize - 2;
#line 23
    i = i + 1;
  }
  while_0_break: /* CIL Label */ ;
  }
#line 44
  if (i == ielen) {
#line 44
    __cil_tmp19 = (u_int8_t *)buf;
#line 44
    tmp = p - __cil_tmp19;
  } else {
#line 44
    tmp = 0;
  }
#line 44
  return ((unsigned int )tmp);
}
}
#line 47 "../versisec/MadWiFi/progs/MADWiFiCVE-2006-6332encode_ie_no_sprintf_ok.c"
int main(void) 
{ u_int8_t buf[6] ;
  u_int8_t ie[5] ;
  char leader[1] ;
  unsigned long __cil_tmp4 ;
  unsigned long __cil_tmp5 ;
  u_int8_t *__cil_tmp6 ;
  void *__cil_tmp7 ;
  unsigned long __cil_tmp8 ;
  unsigned long __cil_tmp9 ;
  u_int8_t *__cil_tmp10 ;
  u_int8_t const   *__cil_tmp11 ;
  unsigned long __cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  char *__cil_tmp14 ;
  char const   *__cil_tmp15 ;

  {
  {
#line 53
  __cil_tmp4 = 0 * 1UL;
#line 53
  __cil_tmp5 = (unsigned long )(buf) + __cil_tmp4;
#line 53
  __cil_tmp6 = (u_int8_t *)__cil_tmp5;
#line 53
  __cil_tmp7 = (void *)__cil_tmp6;
#line 53
  __cil_tmp8 = 0 * 1UL;
#line 53
  __cil_tmp9 = (unsigned long )(ie) + __cil_tmp8;
#line 53
  __cil_tmp10 = (u_int8_t *)__cil_tmp9;
#line 53
  __cil_tmp11 = (u_int8_t const   *)__cil_tmp10;
#line 53
  __cil_tmp12 = 0 * 1UL;
#line 53
  __cil_tmp13 = (unsigned long )(leader) + __cil_tmp12;
#line 53
  __cil_tmp14 = (char *)__cil_tmp13;
#line 53
  __cil_tmp15 = (char const   *)__cil_tmp14;
#line 53
  encode_ie(__cil_tmp7, 6, __cil_tmp11, 5, __cil_tmp15, 1);
  }
#line 57
  return (0);
}
}
