<?xml version="1.0" encoding="utf-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<key id="originfile" attr.name="originFileName" attr.type="string" for="edge">
		<default>/home/hussama/williame/sv-benchmarks2/c/loop-invgen/MADWiFi-encode_ie_ok_true-unreach-call_new_depthk_15_54_45.c</default>
	</key>
	<key id="invariant" attr.name="invariant" attr.type="string" for="node"/>
	<key id="invariant.scope" attr.name="invariant.scope" attr.type="string" for="node"/>
	<key id="nodetype" attr.name="nodeType" attr.type="string" for="node">
		<default>path</default>
	</key>
	<key id="frontier" attr.name="isFrontierNode" attr.type="boolean" for="node">
		<default>false</default>
	</key>
	<key id="violation" attr.name="isViolationNode" attr.type="boolean" for="node">
		<default>false</default>
	</key>
	<key id="entry" attr.name="isEntryNode" attr.type="boolean" for="node">
		<default>false</default>
	</key>
	<key id="sink" attr.name="isSinkNode" attr.type="boolean" for="node">
		<default>false</default>
	</key>
	<key id="sourcecodelang" attr.name="sourcecodeLanguage" attr.type="string" for="graph"/>
	<key id="programfile" attr.name="programfile" attr.type="string" for="graph"/>
	<key id="programhash" attr.name="programhash" attr.type="string" for="graph"/>
	<key id="specification" attr.name="specification" attr.type="string" for="graph"/>
	<key id="memorymodel" attr.name="memoryModel" attr.type="string"/>
	<key id="architecture" attr.name="architecture" attr.type="string"/>
	<key id="producer" attr.name="producer" attr.type="string"/>
	<key id="sourcecode" attr.name="sourcecode" attr.type="string" for="edge"/>
	<key id="startline" attr.name="startline" attr.type="int" for="edge"/>
	<key id="startoffset" attr.name="startoffset" attr.type="int" for="edge"/>
	<key id="control" attr.name="control" attr.type="string" for="edge"/>
	<key id="assumption" attr.name="assumption" attr.type="string" for="edge"/>
	<key id="assumption.resultfunction" attr.name="assumption.resultfunction" attr.type="string" for="edge"/>
	<key id="assumption.scope" attr.name="assumption.scope" attr.type="string" for="edge"/>
	<key id="enterFunction" attr.name="enterFunction" attr.type="string" for="edge"/>
	<key id="returnFromFunction" attr.name="returnFromFunction" attr.type="string" for="edge"/>
	<key id="endline" attr.name="endline" attr.type="int" for="edge"/>
	<key id="endoffset" attr.name="endoffset" attr.type="int" for="edge"/>
	<key id="witness-type" attr.name="witness-type" attr.type="string" for="graph"/>
	<graph edgedefault="directed">
		<data key="witness-type">violation_witness</data>
		<data key="sourcecodelang">C</data>
		<data key="producer">ESBMC 3.1</data>
		<data key="specification">CHECK( init(main()), LTL(G ! call(__VERIFIER_error())) )</data>
		<data key="programfile"/>
		<data key="programhash"/>
		<data key="memoryModel">precise</data>
		<data key="architecture">64bit</data>
		<node id="n0">
			<data key="entry">true</data>
		</node>
		<node id="n1"/>
		<edge id="e0" source="n0" target="n1">
			<data key="startline">29</data>
			<data key="endline">29</data>
			<data key="enterFunction">main</data>
		</edge>
		<node id="n2"/>
		<edge id="e1" source="n1" target="n2">
			<data key="startline">30</data>
			<data key="endline">30</data>
		</edge>
		<node id="n3"/>
		<edge id="e2" source="n2" target="n3">
			<data key="startline">44</data>
			<data key="endline">44</data>
			<data key="enterFunction">pthread_start_main_hook</data>
		</edge>
		<node id="n4"/>
		<edge id="e3" source="n3" target="n4">
			<data key="startline">45</data>
			<data key="endline">45</data>
		</edge>
		<node id="n5"/>
		<edge id="e4" source="n4" target="n5">
			<data key="sourcecode">leader_len = __VERIFIER_nondet_int();</data>
			<data key="startline">141</data>
			<data key="endline">141</data>
			<data key="enterFunction">main</data>
			<data key="assumption">leader_len = 2;</data>
		</edge>
		<node id="n6"/>
		<edge id="e5" source="n5" target="n6">
			<data key="sourcecode">bufsize = __VERIFIER_nondet_int();</data>
			<data key="startline">146</data>
			<data key="endline">146</data>
			<data key="assumption">bufsize = 524288;</data>
		</edge>
		<node id="n7"/>
		<edge id="e6" source="n6" target="n7">
			<data key="sourcecode">ielen = __VERIFIER_nondet_int();</data>
			<data key="startline">151</data>
			<data key="endline">151</data>
			<data key="assumption">ielen = 2;</data>
		</edge>
		<node id="n8"/>
		<edge id="e7" source="n7" target="n8">
			<data key="sourcecode">p = 0;</data>
			<data key="startline">207</data>
			<data key="endline">207</data>
			<data key="assumption">p = 0;</data>
		</edge>
		<node id="n9"/>
		<edge id="e8" source="n8" target="n9">
			<data key="sourcecode">bufsize_0 = bufsize;</data>
			<data key="startline">213</data>
			<data key="endline">213</data>
			<data key="assumption">bufsize_0 = 524288;</data>
		</edge>
		<node id="n10"/>
		<edge id="e9" source="n9" target="n10">
			<data key="sourcecode">bufsize -= leader_len;</data>
			<data key="startline">219</data>
			<data key="endline">219</data>
			<data key="assumption">bufsize = 524286;</data>
		</edge>
		<node id="n11"/>
		<edge id="e10" source="n10" target="n11">
			<data key="sourcecode">p += leader_len;</data>
			<data key="startline">226</data>
			<data key="endline">226</data>
			<data key="assumption">p = 2;</data>
		</edge>
		<node id="n12"/>
		<edge id="e11" source="n11" target="n12">
			<data key="sourcecode">i = 0;</data>
			<data key="startline">240</data>
			<data key="endline">240</data>
			<data key="assumption">i = 0;</data>
		</edge>
		<node id="n13"/>
		<edge id="e12" source="n12" target="n13">
			<data key="assumption">p = 2147483646;</data>
		</edge>
		<node id="n14"/>
		<edge id="e13" source="n13" target="n14">
			<data key="assumption">i = -1073741826;</data>
		</edge>
		<node id="n15"/>
		<edge id="e14" source="n14" target="n15">
			<data key="sourcecode">__VERIFIER_assert(0&lt;=p);</data>
			<data key="startline">256</data>
			<data key="endline">256</data>
			<data key="enterFunction">main</data>
			<data key="assumption">cond = 1;</data>
		</edge>
		<node id="n16"/>
		<edge id="e15" source="n15" target="n16">
			<data key="sourcecode">__VERIFIER_assert(p+1&lt;bufsize_0);</data>
			<data key="startline">264</data>
			<data key="endline">264</data>
			<data key="assumption">cond = 0;</data>
		</edge>
		<node id="n17">
			<data key="violation">true</data>
		</node>
		<edge id="e16" source="n16" target="n17"/>
	</graph>
</graphml>
