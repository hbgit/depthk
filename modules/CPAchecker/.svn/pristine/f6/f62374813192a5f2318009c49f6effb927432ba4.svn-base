/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */

#line 141 "/usr/include/bits/types.h"
typedef long __off_t;
#line 142 "/usr/include/bits/types.h"
typedef long __off64_t;
#line 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h"
typedef unsigned long size_t;
#line 45 "/usr/include/stdio.h"
struct _IO_FILE;
#line 45
struct _IO_FILE;
#line 49 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
#line 170 "/usr/include/libio.h"
struct _IO_FILE;
#line 180 "/usr/include/libio.h"
typedef void _IO_lock_t;
#line 186 "/usr/include/libio.h"
struct _IO_marker {
   struct _IO_marker *_next ;
   struct _IO_FILE *_sbuf ;
   int _pos ;
};
#line 271 "/usr/include/libio.h"
struct _IO_FILE {
   int _flags ;
   char *_IO_read_ptr ;
   char *_IO_read_end ;
   char *_IO_read_base ;
   char *_IO_write_base ;
   char *_IO_write_ptr ;
   char *_IO_write_end ;
   char *_IO_buf_base ;
   char *_IO_buf_end ;
   char *_IO_save_base ;
   char *_IO_backup_base ;
   char *_IO_save_end ;
   struct _IO_marker *_markers ;
   struct _IO_FILE *_chain ;
   int _fileno ;
   int _flags2 ;
   __off_t _old_offset ;
   unsigned short _cur_column ;
   signed char _vtable_offset ;
   char _shortbuf[1] ;
   _IO_lock_t *_lock ;
   __off64_t _offset ;
   void *__pad1 ;
   void *__pad2 ;
   void *__pad3 ;
   void *__pad4 ;
   size_t __pad5 ;
   int _mode ;
   char _unused2[(15UL * sizeof(int ) - 4UL * sizeof(void *)) - sizeof(size_t )] ;
};
#line 214 "/usr/include/stdio.h"
extern int fclose(FILE *__stream ) ;
#line 249
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __modes ) ;
#line 339
extern int printf(char const   * __restrict  __format  , ...) ;
#line 604
extern char *fgets(char * __restrict  __s , int __n , FILE * __restrict  __stream ) ;
#line 127 "/usr/include/string.h"
extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict  __dest , char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
#line 135
extern  __attribute__((__nothrow__)) char *strcat(char * __restrict  __dest , char const   * __restrict  __src )  __attribute__((__nonnull__(1,2))) ;
#line 233
extern  __attribute__((__nothrow__)) char *strchr(char const   *__s , int __c )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 260
extern  __attribute__((__nothrow__)) char *strrchr(char const   *__s , int __c )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 397
extern  __attribute__((__nothrow__)) size_t strlen(char const   *__s )  __attribute__((__pure__,
__nonnull__(1))) ;
#line 493 "/usr/include/unistd.h"
extern  __attribute__((__nothrow__)) int chdir(char const   *__path )  __attribute__((__nonnull__(1))) ;
#line 71 "/usr/include/assert.h"
extern  __attribute__((__nothrow__, __noreturn__)) void __assert_fail(char const   *__assertion ,
                                                                      char const   *__file ,
                                                                      unsigned int __line ,
                                                                      char const   *__function ) ;
#line 93 "mapped-path-bad.c"
char mapped_path[10]  = 
#line 93 "mapped-path-bad.c"
  {      (char )'/',      (char )'\000',      (char)0,      (char)0, 
        (char)0,      (char)0,      (char)0,      (char)0, 
        (char)0,      (char)0};
#line 95 "mapped-path-bad.c"
char *mapping_getwd(char *path ) 
{ size_t tmp ;
  unsigned long __cil_tmp3 ;
  unsigned long __cil_tmp4 ;
  char *__cil_tmp5 ;
  char const   *__cil_tmp6 ;
  char const   * __restrict  __cil_tmp7 ;
  size_t __cil_tmp8 ;
  char * __restrict  __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  char *__cil_tmp12 ;
  char const   * __restrict  __cil_tmp13 ;

  {
  {
#line 104
  __cil_tmp3 = 0 * 1UL;
#line 104
  __cil_tmp4 = (unsigned long )(mapped_path) + __cil_tmp3;
#line 104
  __cil_tmp5 = (char *)__cil_tmp4;
#line 104
  __cil_tmp6 = (char const   *)__cil_tmp5;
#line 104
  tmp = strlen(__cil_tmp6);
#line 104
  __cil_tmp7 = (char const   * __restrict  )"Copying %d chars into buffer path[] whose size = %d\n";
#line 104
  __cil_tmp8 = tmp + 1UL;
#line 104
  printf(__cil_tmp7, __cil_tmp8, 11);
  }
  {
#line 108
  __cil_tmp9 = (char * __restrict  )path;
#line 108
  __cil_tmp10 = 0 * 1UL;
#line 108
  __cil_tmp11 = (unsigned long )(mapped_path) + __cil_tmp10;
#line 108
  __cil_tmp12 = (char *)__cil_tmp11;
#line 108
  __cil_tmp13 = (char const   * __restrict  )__cil_tmp12;
#line 108
  strcpy(__cil_tmp9, __cil_tmp13);
  }
#line 109
  return (path);
}
}
#line 113 "mapped-path-bad.c"
char pathspace[10]  ;
#line 114 "mapped-path-bad.c"
char old_mapped_path[10]  ;
#line 116 "mapped-path-bad.c"
void do_elem(char *dir ) 
{ char *last ;
  char *__cil_tmp3 ;
  char __cil_tmp4 ;
  int __cil_tmp5 ;
  char *__cil_tmp6 ;
  char __cil_tmp7 ;
  int __cil_tmp8 ;
  char *__cil_tmp9 ;
  char __cil_tmp10 ;
  int __cil_tmp11 ;
  char *__cil_tmp12 ;
  char __cil_tmp13 ;
  int __cil_tmp14 ;
  char *__cil_tmp15 ;
  char __cil_tmp16 ;
  int __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  char *__cil_tmp20 ;
  char const   *__cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  unsigned long __cil_tmp23 ;
  char *__cil_tmp24 ;
  unsigned long __cil_tmp25 ;
  unsigned long __cil_tmp26 ;
  unsigned long __cil_tmp27 ;
  unsigned long __cil_tmp28 ;
  char __cil_tmp29 ;
  int __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  char __cil_tmp33 ;
  int __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  unsigned long __cil_tmp36 ;
  char *__cil_tmp37 ;
  char * __restrict  __cil_tmp38 ;
  char const   * __restrict  __cil_tmp39 ;
  unsigned long __cil_tmp40 ;
  unsigned long __cil_tmp41 ;
  char *__cil_tmp42 ;
  char * __restrict  __cil_tmp43 ;
  char const   * __restrict  __cil_tmp44 ;

  {
  {
#line 126
  __cil_tmp3 = dir + 0;
#line 126
  __cil_tmp4 = *__cil_tmp3;
#line 126
  __cil_tmp5 = (int )__cil_tmp4;
#line 126
  if (__cil_tmp5 == 46) {
    {
#line 126
    __cil_tmp6 = dir + 1;
#line 126
    __cil_tmp7 = *__cil_tmp6;
#line 126
    __cil_tmp8 = (int )__cil_tmp7;
#line 126
    if (__cil_tmp8 == 0) {
#line 128
      return;
    } else {

    }
    }
  } else {

  }
  }
  {
#line 132
  __cil_tmp9 = dir + 0;
#line 132
  __cil_tmp10 = *__cil_tmp9;
#line 132
  __cil_tmp11 = (int )__cil_tmp10;
#line 132
  if (__cil_tmp11 == 46) {
    {
#line 132
    __cil_tmp12 = dir + 1;
#line 132
    __cil_tmp13 = *__cil_tmp12;
#line 132
    __cil_tmp14 = (int )__cil_tmp13;
#line 132
    if (__cil_tmp14 == 46) {
      {
#line 132
      __cil_tmp15 = dir + 2;
#line 132
      __cil_tmp16 = *__cil_tmp15;
#line 132
      __cil_tmp17 = (int )__cil_tmp16;
#line 132
      if (__cil_tmp17 == 0) {
        {
#line 135
        __cil_tmp18 = 0 * 1UL;
#line 135
        __cil_tmp19 = (unsigned long )(mapped_path) + __cil_tmp18;
#line 135
        __cil_tmp20 = (char *)__cil_tmp19;
#line 135
        __cil_tmp21 = (char const   *)__cil_tmp20;
#line 135
        last = strrchr(__cil_tmp21, '/');
        }
#line 135
        if (last) {
          {
#line 137
          __cil_tmp22 = 0 * 1UL;
#line 137
          __cil_tmp23 = (unsigned long )(mapped_path) + __cil_tmp22;
#line 137
          __cil_tmp24 = (char *)__cil_tmp23;
#line 137
          __cil_tmp25 = (unsigned long )__cil_tmp24;
#line 137
          __cil_tmp26 = (unsigned long )last;
#line 137
          if (__cil_tmp26 == __cil_tmp25) {
#line 138
            last = last + 1;
          } else {

          }
          }
#line 139
          *last = (char )'\000';
        } else {

        }
#line 141
        return;
      } else {

      }
      }
    } else {

    }
    }
  } else {

  }
  }
  {
#line 145
  __cil_tmp27 = 0 * 1UL;
#line 145
  __cil_tmp28 = (unsigned long )(mapped_path) + __cil_tmp27;
#line 145
  __cil_tmp29 = *((char *)__cil_tmp28);
#line 145
  __cil_tmp30 = (int )__cil_tmp29;
#line 145
  if (__cil_tmp30 == 47) {
    {
#line 145
    __cil_tmp31 = 1 * 1UL;
#line 145
    __cil_tmp32 = (unsigned long )(mapped_path) + __cil_tmp31;
#line 145
    __cil_tmp33 = *((char *)__cil_tmp32);
#line 145
    __cil_tmp34 = (int )__cil_tmp33;
#line 145
    if (__cil_tmp34 == 0) {

    } else {
#line 145
      goto __TESTCLAIM_2;
    }
    }
  } else {
    __TESTCLAIM_2: 
    {
#line 149
    __cil_tmp35 = 0 * 1UL;
#line 149
    __cil_tmp36 = (unsigned long )(mapped_path) + __cil_tmp35;
#line 149
    __cil_tmp37 = (char *)__cil_tmp36;
#line 149
    __cil_tmp38 = (char * __restrict  )__cil_tmp37;
#line 149
    __cil_tmp39 = (char const   * __restrict  )"/";
#line 149
    strcat(__cil_tmp38, __cil_tmp39);
    }
  }
  }
  {
#line 154
  __cil_tmp40 = 0 * 1UL;
#line 154
  __cil_tmp41 = (unsigned long )(mapped_path) + __cil_tmp40;
#line 154
  __cil_tmp42 = (char *)__cil_tmp41;
#line 154
  __cil_tmp43 = (char * __restrict  )__cil_tmp42;
#line 154
  __cil_tmp44 = (char const   * __restrict  )dir;
#line 154
  strcat(__cil_tmp43, __cil_tmp44);
  }
#line 155
  return;
}
}
#line 157 "mapped-path-bad.c"
int mapping_chdir(char *orig_path ) 
{ int ret ;
  char *sl ;
  char *path ;
  size_t tmp ;
  size_t tmp___0 ;
  char *dir ;
  size_t tmp___1 ;
  char const   * __restrict  __cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  char *__cil_tmp12 ;
  char * __restrict  __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  char *__cil_tmp16 ;
  char const   * __restrict  __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  char * __restrict  __cil_tmp20 ;
  char const   * __restrict  __cil_tmp21 ;
  char const   *__cil_tmp22 ;
  char const   * __restrict  __cil_tmp23 ;
  char const   *__cil_tmp24 ;
  char const   * __restrict  __cil_tmp25 ;
  char *__cil_tmp26 ;
  char __cil_tmp27 ;
  int __cil_tmp28 ;
  unsigned long __cil_tmp29 ;
  unsigned long __cil_tmp30 ;
  unsigned long __cil_tmp31 ;
  unsigned long __cil_tmp32 ;
  char const   * __restrict  __cil_tmp33 ;
  unsigned long __cil_tmp34 ;
  unsigned long __cil_tmp35 ;
  char *__cil_tmp36 ;
  char const   *__cil_tmp37 ;
  char __cil_tmp38 ;
  int __cil_tmp39 ;
  char const   * __restrict  __cil_tmp40 ;
  char const   * __restrict  __cil_tmp41 ;
  unsigned long __cil_tmp42 ;
  unsigned long __cil_tmp43 ;
  char *__cil_tmp44 ;
  unsigned long __cil_tmp45 ;
  unsigned long __cil_tmp46 ;
  char *__cil_tmp47 ;
  char const   *__cil_tmp48 ;
  char const   * __restrict  __cil_tmp49 ;
  unsigned long __cil_tmp50 ;
  unsigned long __cil_tmp51 ;
  char *__cil_tmp52 ;
  char const   *__cil_tmp53 ;
  char const   * __restrict  __cil_tmp54 ;
  unsigned long __cil_tmp55 ;
  unsigned long __cil_tmp56 ;
  char *__cil_tmp57 ;
  unsigned long __cil_tmp58 ;
  unsigned long __cil_tmp59 ;
  char *__cil_tmp60 ;
  char * __restrict  __cil_tmp61 ;
  unsigned long __cil_tmp62 ;
  unsigned long __cil_tmp63 ;
  char *__cil_tmp64 ;
  char const   * __restrict  __cil_tmp65 ;
  char const   * __restrict  __cil_tmp66 ;
  unsigned long __cil_tmp67 ;
  unsigned long __cil_tmp68 ;
  char *__cil_tmp69 ;

  {
  {
#line 168
  __cil_tmp9 = (char const   * __restrict  )"Entering mapping_chdir with orig_path = %s\n";
#line 168
  printf(__cil_tmp9, orig_path);
#line 170
  __cil_tmp10 = 0 * 1UL;
#line 170
  __cil_tmp11 = (unsigned long )(old_mapped_path) + __cil_tmp10;
#line 170
  __cil_tmp12 = (char *)__cil_tmp11;
#line 170
  __cil_tmp13 = (char * __restrict  )__cil_tmp12;
#line 170
  __cil_tmp14 = 0 * 1UL;
#line 170
  __cil_tmp15 = (unsigned long )(mapped_path) + __cil_tmp14;
#line 170
  __cil_tmp16 = (char *)__cil_tmp15;
#line 170
  __cil_tmp17 = (char const   * __restrict  )__cil_tmp16;
#line 170
  strcpy(__cil_tmp13, __cil_tmp17);
#line 171
  __cil_tmp18 = 0 * 1UL;
#line 171
  __cil_tmp19 = (unsigned long )(pathspace) + __cil_tmp18;
#line 171
  path = (char *)__cil_tmp19;
  }
  {
#line 175
  __cil_tmp20 = (char * __restrict  )path;
#line 175
  __cil_tmp21 = (char const   * __restrict  )orig_path;
#line 175
  strcpy(__cil_tmp20, __cil_tmp21);
#line 176
  __cil_tmp22 = (char const   *)path;
#line 176
  tmp = strlen(__cil_tmp22);
#line 176
  __cil_tmp23 = (char const   * __restrict  )"Copying orig_path to path....max strlen(path) = %d. strlen(path) = %d\n";
#line 176
  printf(__cil_tmp23, 9, tmp);
#line 177
  __cil_tmp24 = (char const   *)path;
#line 177
  tmp___0 = strlen(__cil_tmp24);
  }
#line 177
  if (tmp___0 >= 10UL) {
    {
#line 178
    __cil_tmp25 = (char const   * __restrict  )"ALERT:pathspace[MAXPATHLEN] has been overflowed!\n";
#line 178
    printf(__cil_tmp25);
    }
  } else {

  }
  {
#line 182
  __cil_tmp26 = path + 0;
#line 182
  __cil_tmp27 = *__cil_tmp26;
#line 182
  __cil_tmp28 = (int )__cil_tmp27;
#line 182
  if (__cil_tmp28 == 47) {
#line 183
    __cil_tmp29 = 0 * 1UL;
#line 183
    __cil_tmp30 = (unsigned long )(mapped_path) + __cil_tmp29;
#line 183
    *((char *)__cil_tmp30) = (char )'/';
#line 184
    __cil_tmp31 = 1 * 1UL;
#line 184
    __cil_tmp32 = (unsigned long )(mapped_path) + __cil_tmp31;
#line 184
    *((char *)__cil_tmp32) = (char )'\000';
#line 185
    path = path + 1;
  } else {

  }
  }
  {
#line 188
  __cil_tmp33 = (char const   * __restrict  )"so far mapped_path = %s\n";
#line 188
  __cil_tmp34 = 0 * 1UL;
#line 188
  __cil_tmp35 = (unsigned long )(mapped_path) + __cil_tmp34;
#line 188
  __cil_tmp36 = (char *)__cil_tmp35;
#line 188
  printf(__cil_tmp33, __cil_tmp36);
  }
  {
#line 190
  while (1) {
    while_continue: /* CIL Label */ ;
    {
#line 190
    __cil_tmp37 = (char const   *)path;
#line 190
    sl = strchr(__cil_tmp37, '/');
    }
#line 190
    if (sl) {

    } else {
#line 190
      goto while_break;
    }
#line 192
    dir = path;
#line 193
    *sl = (char )'\000';
#line 194
    path = sl + 1;
#line 195
    if (*dir) {
      {
#line 196
      do_elem(dir);
      }
    } else {

    }
    {
#line 197
    __cil_tmp38 = *path;
#line 197
    __cil_tmp39 = (int )__cil_tmp38;
#line 197
    if (__cil_tmp39 == 0) {
#line 198
      goto while_break;
    } else {

    }
    }
  }
  while_break: /* CIL Label */ ;
  }
#line 200
  if (*path) {
    {
#line 202
    __cil_tmp40 = (char const   * __restrict  )"path = %s.. calling do_elem\n";
#line 202
    printf(__cil_tmp40, path);
#line 203
    do_elem(path);
    }
  } else {

  }
  {
#line 205
  __cil_tmp41 = (char const   * __restrict  )"mapped_path = %s\n";
#line 205
  __cil_tmp42 = 0 * 1UL;
#line 205
  __cil_tmp43 = (unsigned long )(mapped_path) + __cil_tmp42;
#line 205
  __cil_tmp44 = (char *)__cil_tmp43;
#line 205
  printf(__cil_tmp41, __cil_tmp44);
#line 206
  __cil_tmp45 = 0 * 1UL;
#line 206
  __cil_tmp46 = (unsigned long )(mapped_path) + __cil_tmp45;
#line 206
  __cil_tmp47 = (char *)__cil_tmp46;
#line 206
  __cil_tmp48 = (char const   *)__cil_tmp47;
#line 206
  tmp___1 = strlen(__cil_tmp48);
  }
#line 206
  if (tmp___1 >= 10UL) {
    {
#line 207
    __cil_tmp49 = (char const   * __restrict  )"ALERT: mapped_path[MAXPATHLEN] has been overflowed!\n";
#line 207
    printf(__cil_tmp49);
    }
  } else {

  }
  {
#line 211
  __cil_tmp50 = 0 * 1UL;
#line 211
  __cil_tmp51 = (unsigned long )(mapped_path) + __cil_tmp50;
#line 211
  __cil_tmp52 = (char *)__cil_tmp51;
#line 211
  __cil_tmp53 = (char const   *)__cil_tmp52;
#line 211
  ret = chdir(__cil_tmp53);
  }
#line 211
  if (ret < 0) {
    {
#line 212
    __cil_tmp54 = (char const   * __restrict  )"couldn\'t chdir to %s !\n";
#line 212
    __cil_tmp55 = 0 * 1UL;
#line 212
    __cil_tmp56 = (unsigned long )(mapped_path) + __cil_tmp55;
#line 212
    __cil_tmp57 = (char *)__cil_tmp56;
#line 212
    printf(__cil_tmp54, __cil_tmp57);
#line 213
    __cil_tmp58 = 0 * 1UL;
#line 213
    __cil_tmp59 = (unsigned long )(mapped_path) + __cil_tmp58;
#line 213
    __cil_tmp60 = (char *)__cil_tmp59;
#line 213
    __cil_tmp61 = (char * __restrict  )__cil_tmp60;
#line 213
    __cil_tmp62 = 0 * 1UL;
#line 213
    __cil_tmp63 = (unsigned long )(old_mapped_path) + __cil_tmp62;
#line 213
    __cil_tmp64 = (char *)__cil_tmp63;
#line 213
    __cil_tmp65 = (char const   * __restrict  )__cil_tmp64;
#line 213
    strcpy(__cil_tmp61, __cil_tmp65);
#line 214
    __cil_tmp66 = (char const   * __restrict  )"mapped_path changed to %s\n";
#line 214
    __cil_tmp67 = 0 * 1UL;
#line 214
    __cil_tmp68 = (unsigned long )(mapped_path) + __cil_tmp67;
#line 214
    __cil_tmp69 = (char *)__cil_tmp68;
#line 214
    printf(__cil_tmp66, __cil_tmp69);
    }
  } else {

  }
#line 217
  return (ret);
}
}
#line 232 "mapped-path-bad.c"
void pwd(void) 
{ int canary ;
  char path[11] ;
  size_t tmp ;
  char *tmp___0 ;
  unsigned long __cil_tmp5 ;
  unsigned long __cil_tmp6 ;
  char *__cil_tmp7 ;
  void *__cil_tmp8 ;
  char *__cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  char const   * __restrict  __cil_tmp12 ;
  char const   * __restrict  __cil_tmp13 ;
  unsigned long __cil_tmp14 ;
  unsigned long __cil_tmp15 ;
  char *__cil_tmp16 ;
  unsigned long __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  char *__cil_tmp19 ;
  char const   *__cil_tmp20 ;
  char const   * __restrict  __cil_tmp21 ;
  char const   * __restrict  __cil_tmp22 ;
  char const   * __restrict  __cil_tmp23 ;

  {
  {
#line 239
  canary = 7;
#line 255
  __cil_tmp5 = 0 * 1UL;
#line 255
  __cil_tmp6 = (unsigned long )(path) + __cil_tmp5;
#line 255
  __cil_tmp7 = (char *)__cil_tmp6;
#line 255
  tmp___0 = mapping_getwd(__cil_tmp7);
  }
  {
#line 255
  __cil_tmp8 = (void *)0;
#line 255
  __cil_tmp9 = (char *)__cil_tmp8;
#line 255
  __cil_tmp10 = (unsigned long )__cil_tmp9;
#line 255
  __cil_tmp11 = (unsigned long )tmp___0;
#line 255
  if (__cil_tmp11 == __cil_tmp10) {
    {
#line 260
    __cil_tmp12 = (char const   * __restrict  )"Couldn\'t get current directory!\n";
#line 260
    printf(__cil_tmp12);
    }
  } else {
    {
#line 263
    __cil_tmp13 = (char const   * __restrict  )"Current directory = %s\n";
#line 263
    __cil_tmp14 = 0 * 1UL;
#line 263
    __cil_tmp15 = (unsigned long )(path) + __cil_tmp14;
#line 263
    __cil_tmp16 = (char *)__cil_tmp15;
#line 263
    printf(__cil_tmp13, __cil_tmp16);
#line 264
    __cil_tmp17 = 0 * 1UL;
#line 264
    __cil_tmp18 = (unsigned long )(path) + __cil_tmp17;
#line 264
    __cil_tmp19 = (char *)__cil_tmp18;
#line 264
    __cil_tmp20 = (char const   *)__cil_tmp19;
#line 264
    tmp = strlen(__cil_tmp20);
#line 264
    __cil_tmp21 = (char const   * __restrict  )"max strlen(path) is %d, strlen(path) = %d\n";
#line 264
    printf(__cil_tmp21, 9, tmp);
#line 265
    __cil_tmp22 = (char const   * __restrict  )"Canary should be 7.  Canary = %d\n";
#line 265
    printf(__cil_tmp22, canary);
    }
#line 266
    if (canary != 7) {
      {
#line 267
      __cil_tmp23 = (char const   * __restrict  )"ALERT: path[MAXPATHLEN + 1] has been overflowed!\n";
#line 267
      printf(__cil_tmp23);
      }
    } else {

    }
  }
  }
#line 269
  return;
}
}
#line 272 "mapped-path-bad.c"
int main(int argc , char **argv ) 
{ char orig_path[30] ;
  FILE *f ;
  char **__cil_tmp5 ;
  char *__cil_tmp6 ;
  char const   * __restrict  __cil_tmp7 ;
  char const   * __restrict  __cil_tmp8 ;
  void *__cil_tmp9 ;
  unsigned long __cil_tmp10 ;
  unsigned long __cil_tmp11 ;
  unsigned long __cil_tmp12 ;
  unsigned long __cil_tmp13 ;
  char *__cil_tmp14 ;
  char * __restrict  __cil_tmp15 ;
  FILE * __restrict  __cil_tmp16 ;
  char const   * __restrict  __cil_tmp17 ;
  unsigned long __cil_tmp18 ;
  unsigned long __cil_tmp19 ;
  char *__cil_tmp20 ;
  unsigned long __cil_tmp21 ;
  unsigned long __cil_tmp22 ;
  char *__cil_tmp23 ;

  {
#line 277
  if (argc == 2) {

  } else {
    {
#line 277
    __assert_fail("argc == 2", "mapped-path-bad.c", 277U, "main");
    }
  }
  {
#line 278
  __cil_tmp5 = argv + 1;
#line 278
  __cil_tmp6 = *__cil_tmp5;
#line 278
  __cil_tmp7 = (char const   * __restrict  )__cil_tmp6;
#line 278
  __cil_tmp8 = (char const   * __restrict  )"r";
#line 278
  f = fopen(__cil_tmp7, __cil_tmp8);
  }
  {
#line 279
  __cil_tmp9 = (void *)0;
#line 279
  __cil_tmp10 = (unsigned long )__cil_tmp9;
#line 279
  __cil_tmp11 = (unsigned long )f;
#line 279
  if (__cil_tmp11 != __cil_tmp10) {

  } else {
    {
#line 279
    __assert_fail("f != ((void *)0)", "mapped-path-bad.c", 279U, "main");
    }
  }
  }
  {
#line 281
  __cil_tmp12 = 0 * 1UL;
#line 281
  __cil_tmp13 = (unsigned long )(orig_path) + __cil_tmp12;
#line 281
  __cil_tmp14 = (char *)__cil_tmp13;
#line 281
  __cil_tmp15 = (char * __restrict  )__cil_tmp14;
#line 281
  __cil_tmp16 = (FILE * __restrict  )f;
#line 281
  fgets(__cil_tmp15, 30, __cil_tmp16);
#line 282
  fclose(f);
#line 284
  __cil_tmp17 = (char const   * __restrict  )"orig_path = %s\n";
#line 284
  __cil_tmp18 = 0 * 1UL;
#line 284
  __cil_tmp19 = (unsigned long )(orig_path) + __cil_tmp18;
#line 284
  __cil_tmp20 = (char *)__cil_tmp19;
#line 284
  printf(__cil_tmp17, __cil_tmp20);
#line 286
  __cil_tmp21 = 0 * 1UL;
#line 286
  __cil_tmp22 = (unsigned long )(orig_path) + __cil_tmp21;
#line 286
  __cil_tmp23 = (char *)__cil_tmp22;
#line 286
  mapping_chdir(__cil_tmp23);
#line 287
  pwd();
  }
#line 291
  return (0);
}
}
