
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package org.sosy_lab.cpachecker.cpa.automaton;

import java.io.IOException;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Level;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import org.sosy_lab.common.configuration.Configuration;
import org.sosy_lab.common.configuration.InvalidConfigurationException;
import org.sosy_lab.common.log.LogManager;
import org.sosy_lab.cpachecker.cfa.CParser;
import org.sosy_lab.cpachecker.cfa.DummyParser;
import org.sosy_lab.cpachecker.cfa.DummyScope;
import org.sosy_lab.cpachecker.cfa.parser.Scope;
import org.sosy_lab.cpachecker.cfa.ast.AExpression;
import org.sosy_lab.cpachecker.cfa.ast.c.CStatement;
import org.sosy_lab.cpachecker.cfa.types.MachineModel;
import org.sosy_lab.cpachecker.cfa.Language;
import com.google.common.base.Throwables;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@javax.annotation.Generated("JFlex")
@SuppressWarnings(value = {"all", "cast", "rawtypes", "unchecked", "MissingOverride"} )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = {"EI_EXPOSE_REP", "MS_PKGPROTECT", "SIC_INNER_SHOULD_BE_STATIC"})
public class AutomatonParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return AutomatonSym.class;
}

  /** Default constructor. */
  @Deprecated
  public AutomatonParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AutomatonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AutomatonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\006\011\000" +
    "\002\005\006\000\002\007\004\000\002\007\002\000\002" +
    "\015\006\000\002\015\010\000\002\010\004\000\002\010" +
    "\002\000\002\016\010\000\002\017\003\000\002\017\002" +
    "\000\002\020\003\000\002\020\003\000\002\020\002\000" +
    "\002\011\004\000\002\011\002\000\002\021\012\000\002" +
    "\021\011\000\002\021\014\000\002\021\011\000\002\021" +
    "\011\000\002\012\004\000\002\012\002\000\002\022\004" +
    "\000\002\013\004\000\002\013\002\000\002\014\004\000" +
    "\002\014\002\000\002\023\006\000\002\023\004\000\002" +
    "\023\011\000\002\023\010\000\002\024\004\000\002\024" +
    "\002\000\002\026\003\000\002\026\005\000\002\026\003" +
    "\000\002\026\005\000\002\026\005\000\002\027\003\000" +
    "\002\027\011\000\002\027\010\000\002\025\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\004\000\002\030" +
    "\005\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\004\000\002\030\004\000\002\030\004\000\002" +
    "\030\005\000\002\030\005\000\002\030\004\000\002\030" +
    "\004\000\002\030\004\000\002\030\011\000\002\030\010" +
    "\000\002\030\006\000\002\030\006\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\011\000\002" +
    "\031\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\uffff\015\007\016\012\017\013\031" +
    "\011\001\002\000\014\002\ufffe\015\ufffe\016\ufffe\017\ufffe" +
    "\031\ufffe\001\002\000\004\010\253\001\002\000\014\002" +
    "\uffff\015\007\016\012\017\013\031\011\001\002\000\004" +
    "\043\123\001\002\000\004\002\122\001\002\000\024\004" +
    "\027\013\017\033\020\035\032\036\031\043\030\044\033" +
    "\052\022\053\026\001\002\000\004\015\007\001\002\000" +
    "\004\015\007\001\002\000\014\002\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\031\ufffa\001\002\000\014\002\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\031\ufffb\001\002\000\014\002\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\031\ufffc\001\002\000\024\004\027\013" +
    "\017\033\020\035\032\036\031\043\030\044\033\052\022" +
    "\053\026\001\002\000\020\026\113\027\111\031\114\034" +
    "\107\054\112\055\115\056\110\001\002\000\072\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\013\uffd7\014\uffd7\024" +
    "\uffd7\025\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\001\002\000\066\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\013\uffce\014\uffce\024\uffce\025\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\047\uffce" +
    "\052\uffce\053\uffce\054\uffce\001\002\000\012\045\075\047" +
    "\076\050\073\051\074\001\002\000\072\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\013\uffd2\014\uffd2\024\uffd2\025" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\001\002\000\036\005\063\006\066\010\uffe2\024\uffe2\025" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\045\064\047\065\001\002\000\066\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\013\uffcd\014\uffcd\024\uffcd" +
    "\025\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000" +
    "\024\004\027\013\017\033\020\035\032\036\031\043\030" +
    "\044\033\052\022\053\026\001\002\000\072\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\013\uffd5\014\uffd5\024\uffd5" +
    "\025\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\001\002\000\004\013\051\001\002\000\004\013\034" +
    "\001\002\000\072\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\013\uffcf\014\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\001\002\000\010\043" +
    "\035\054\036\062\037\001\002\000\006\011\042\013\043" +
    "\001\002\000\004\014\041\001\002\000\004\014\040\001" +
    "\002\000\066\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\013\uffb9\014\uffb9\024\uffb9\025\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9" +
    "\042\uffb9\043\uffb9\044\uffb9\045\uffb9\047\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\001\002\000\066\004\uffba\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\013\uffba\014\uffba\024\uffba\025\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\047" +
    "\uffba\052\uffba\053\uffba\054\uffba\001\002\000\004\054\047" +
    "\001\002\000\004\054\044\001\002\000\004\014\045\001" +
    "\002\000\004\014\046\001\002\000\066\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\024\uffbc\025" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\035\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\047\uffbc\052\uffbc\053\uffbc\054\uffbc\001\002\000\004" +
    "\014\050\001\002\000\066\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\013\uffbb\014\uffbb\024\uffbb\025\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\047\uffbb" +
    "\052\uffbb\053\uffbb\054\uffbb\001\002\000\004\043\052\001" +
    "\002\000\006\011\053\013\054\001\002\000\004\054\060" +
    "\001\002\000\004\054\055\001\002\000\004\014\056\001" +
    "\002\000\004\014\057\001\002\000\072\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\013\uffd1\014\uffd1\024\uffd1\025" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\001\002\000\004\014\061\001\002\000\072\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\013\uffd0\014\uffd0\024\uffd0" +
    "\025\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\001\002\000\066\004\uffcc\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\013\uffcc\014\uffcc\024\uffcc\025\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\001\002\000\024\004\027\013\017" +
    "\033\020\035\032\036\031\043\030\044\033\052\022\053" +
    "\026\001\002\000\024\004\027\013\017\033\020\035\032" +
    "\036\031\043\030\044\033\052\022\053\026\001\002\000" +
    "\024\004\027\013\017\033\020\035\032\036\031\043\030" +
    "\044\033\052\022\053\026\001\002\000\024\004\027\013" +
    "\017\033\020\035\032\036\031\043\030\044\033\052\022" +
    "\053\026\001\002\000\066\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\013\uffc5\014\uffc5\024\uffc5\025\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\064\047\065" +
    "\052\uffc5\053\uffc5\054\uffc5\001\002\000\066\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8\024\uffc8" +
    "\025\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\047\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002\000" +
    "\066\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7" +
    "\014\uffc7\024\uffc7\025\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\047\uffc7\052\uffc7\053\uffc7\054" +
    "\uffc7\001\002\000\066\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\013\uffc6\014\uffc6\024\uffc6\025\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\064\047\065\052" +
    "\uffc6\053\uffc6\054\uffc6\001\002\000\012\013\077\036\031" +
    "\043\030\044\033\001\002\000\012\013\077\036\031\043" +
    "\030\044\033\001\002\000\012\013\077\036\031\043\030" +
    "\044\033\001\002\000\012\013\077\036\031\043\030\044" +
    "\033\001\002\000\012\013\077\036\031\043\030\044\033" +
    "\001\002\000\072\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\013\uffca\014\uffca\024\uffca\025\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca\050\073" +
    "\051\074\052\uffca\053\uffca\054\uffca\001\002\000\014\014" +
    "\103\045\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002\000\006" +
    "\050\073\051\074\001\002\000\072\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\013\uffd6\014\uffd6\024\uffd6\025\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\001" +
    "\002\000\072\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\013\uffc9\014\uffc9\024\uffc9\025\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\047\uffc9\050\073\051" +
    "\074\052\uffc9\053\uffc9\054\uffc9\001\002\000\072\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\013\uffd3\014\uffd3\024" +
    "\uffd3\025\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\001\002\000\072\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\013\uffd4\014\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4" +
    "\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\001\002\000" +
    "\006\054\117\056\116\001\002\000\066\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\024\uffc2\025" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\047\uffc2\052\uffc2\053\uffc2\054\uffc2\001\002\000\066" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014" +
    "\uffbd\024\uffbd\025\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\047\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\066\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\013\uffc4\014\uffc4\024\uffc4\025\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\047\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\001\002\000\066\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\013\uffbe\014\uffbe\024\uffbe\025\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\047\uffbe\052\uffbe\053\uffbe\054\uffbe\001\002\000\066\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\014\uffbf" +
    "\024\uffbf\025\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\047\uffbf\052\uffbf\053\uffbf\054\uffbf\001" +
    "\002\000\066\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\013\uffc3\014\uffc3\024\uffc3\025\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\047\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\001\002\000\066\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\013\uffc0\014\uffc0\024\uffc0\025\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\047" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\001\002\000\066\004\uffc1" +
    "\005\uffc1\006\uffc1\007\uffc1\010\uffc1\013\uffc1\014\uffc1\024" +
    "\uffc1\025\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\047\uffc1\052\uffc1\053\uffc1\054\uffc1\001\002" +
    "\000\014\005\063\006\066\014\121\045\064\047\065\001" +
    "\002\000\066\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\024\uffcb\025\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\052\uffcb\053" +
    "\uffcb\054\uffcb\001\002\000\004\002\000\001\002\000\006" +
    "\021\124\022\ufff6\001\002\000\004\043\244\001\002\000" +
    "\006\021\124\022\ufff6\001\002\000\004\022\127\001\002" +
    "\000\004\023\240\001\002\000\010\020\ufff2\023\uffef\061" +
    "\134\001\002\000\004\020\236\001\002\000\010\020\ufff2" +
    "\023\uffef\061\134\001\002\000\004\023\135\001\002\000" +
    "\004\023\ufff0\001\002\000\010\043\uffec\057\136\060\137" +
    "\001\002\000\004\043\uffed\001\002\000\004\043\uffee\001" +
    "\002\000\004\043\141\001\002\000\004\012\142\001\002" +
    "\000\032\004\027\013\017\020\uffea\023\uffea\033\020\035" +
    "\032\036\031\043\030\044\033\052\022\053\026\061\uffea" +
    "\001\002\000\032\004\027\013\017\020\uffea\023\uffea\033" +
    "\020\035\032\036\031\043\030\044\033\052\022\053\026" +
    "\061\uffea\001\002\000\014\005\063\006\066\007\146\045" +
    "\064\047\065\001\002\000\010\020\ufff1\023\ufff1\061\ufff1" +
    "\001\002\000\024\024\uffe3\025\uffe3\030\uffe3\031\011\032" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\001\002\000\024" +
    "\024\uffe3\025\uffe3\030\uffe3\031\011\032\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\001\002\000\022\024\uffe0\025\uffe0" +
    "\030\uffe0\032\151\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001" +
    "\002\000\004\055\232\001\002\000\020\024\uffde\025\uffde" +
    "\030\uffde\037\157\040\153\041\154\042\uffde\001\002\000" +
    "\004\043\227\001\002\000\044\004\027\013\017\024\uffd8" +
    "\025\uffd8\030\uffd8\033\020\035\032\036\214\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\030\044\033\052\022\053\026" +
    "\054\210\001\002\000\020\024\uffde\025\uffde\030\uffde\037" +
    "\157\040\153\041\154\042\uffde\001\002\000\012\024\171" +
    "\025\173\030\172\042\174\001\002\000\004\013\160\001" +
    "\002\000\004\043\161\001\002\000\006\011\162\013\163" +
    "\001\002\000\004\054\167\001\002\000\004\054\164\001" +
    "\002\000\004\014\165\001\002\000\004\014\166\001\002" +
    "\000\020\024\uffdb\025\uffdb\030\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\001\002\000\004\014\170\001\002\000\020" +
    "\024\uffda\025\uffda\030\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\uffda\001\002\000\006\010\201\013\202\001\002\000\004" +
    "\010\200\001\002\000\004\010\177\001\002\000\004\043" +
    "\175\001\002\000\004\010\176\001\002\000\032\004\uffe9" +
    "\013\uffe9\020\uffe9\023\uffe9\033\uffe9\035\uffe9\036\uffe9\043" +
    "\uffe9\044\uffe9\052\uffe9\053\uffe9\061\uffe9\001\002\000\032" +
    "\004\uffe6\013\uffe6\020\uffe6\023\uffe6\033\uffe6\035\uffe6\036" +
    "\uffe6\043\uffe6\044\uffe6\052\uffe6\053\uffe6\061\uffe6\001\002" +
    "\000\032\004\uffe5\013\uffe5\020\uffe5\023\uffe5\033\uffe5\035" +
    "\uffe5\036\uffe5\043\uffe5\044\uffe5\052\uffe5\053\uffe5\061\uffe5" +
    "\001\002\000\032\004\uffe8\013\uffe8\020\uffe8\023\uffe8\033" +
    "\uffe8\035\uffe8\036\uffe8\043\uffe8\044\uffe8\052\uffe8\053\uffe8" +
    "\061\uffe8\001\002\000\004\054\203\001\002\000\004\014" +
    "\204\001\002\000\004\010\205\001\002\000\032\004\uffe7" +
    "\013\uffe7\020\uffe7\023\uffe7\033\uffe7\035\uffe7\036\uffe7\043" +
    "\uffe7\044\uffe7\052\uffe7\053\uffe7\061\uffe7\001\002\000\012" +
    "\024\uffdf\025\uffdf\030\uffdf\042\uffdf\001\002\000\020\024" +
    "\uffdc\025\uffdc\030\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc" +
    "\001\002\000\044\004\uffb6\013\uffb6\024\uffb6\025\uffb6\030" +
    "\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\052\uffb6\053\uffb6\054\uffb6\001" +
    "\002\000\044\004\027\013\017\024\uffd8\025\uffd8\030\uffd8" +
    "\033\020\035\032\036\214\037\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\043\030\044\033\052\022\053\026\054\210\001\002" +
    "\000\054\004\uffb8\013\uffb8\024\uffb8\025\uffb8\030\uffb8\033" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052" +
    "\uffb8\053\uffb8\054\uffb8\001\002\000\054\004\uffb7\005\063" +
    "\006\066\013\uffb7\024\uffb7\025\uffb7\030\uffb7\033\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\064\047\065\052\uffb7\053\uffb7\054\uffb7\001" +
    "\002\000\004\013\215\001\002\000\004\043\216\001\002" +
    "\000\006\011\217\013\220\001\002\000\004\054\224\001" +
    "\002\000\004\054\221\001\002\000\004\014\222\001\002" +
    "\000\004\014\223\001\002\000\054\004\uffb5\013\uffb5\024" +
    "\uffb5\025\uffb5\030\uffb5\033\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffb5\053\uffb5\054\uffb5\001\002" +
    "\000\004\014\225\001\002\000\054\004\uffb4\013\uffb4\024" +
    "\uffb4\025\uffb4\030\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffb4\053\uffb4\054\uffb4\001\002" +
    "\000\020\024\uffd9\025\uffd9\030\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\001\002\000\004\046\230\001\002\000\012" +
    "\013\077\036\031\043\030\044\033\001\002\000\024\024" +
    "\uffdd\025\uffdd\030\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\050\073\051\074\001\002\000\020\024\uffe1\025\uffe1\030" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001\002\000\022" +
    "\024\uffe4\025\uffe4\030\uffe4\032\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\001\002\000\010\020\uffeb\023\uffeb\061\uffeb" +
    "\001\002\000\004\020\ufff3\001\002\000\004\015\237\001" +
    "\002\000\014\002\ufff9\015\ufff9\016\ufff9\017\ufff9\031\ufff9" +
    "\001\002\000\004\043\241\001\002\000\004\010\242\001" +
    "\002\000\010\020\ufff8\023\ufff8\061\ufff8\001\002\000\004" +
    "\022\ufff7\001\002\000\004\043\245\001\002\000\006\010" +
    "\247\046\246\001\002\000\004\044\033\001\002\000\006" +
    "\021\ufff5\022\ufff5\001\002\000\004\010\251\001\002\000" +
    "\006\021\ufff4\022\ufff4\001\002\000\004\002\001\001\002" +
    "\000\014\002\ufffd\015\ufffd\016\ufffd\017\ufffd\031\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\007\003\005\004\003\006\013\022" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\251\003\005\004\003\006\013\022\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\020\026\023" +
    "\027\022\030\024\001\001\000\004\006\015\001\001\000" +
    "\004\006\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\020\026\100\027\022\030" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\020\026\023\027\022" +
    "\030\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\020\026" +
    "\023\027\022\030\071\001\001\000\012\025\020\026\023" +
    "\027\022\030\070\001\001\000\012\025\020\026\023\027" +
    "\022\030\067\001\001\000\012\025\020\026\023\027\022" +
    "\030\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\020\026\023" +
    "\027\105\001\001\000\010\025\020\026\023\027\104\001" +
    "\001\000\010\025\020\026\023\027\103\001\001\000\010" +
    "\025\020\026\023\027\077\001\001\000\010\025\020\026" +
    "\100\027\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\125\015\124\001\001\000\002" +
    "\001\001\000\006\007\242\015\124\001\001\000\004\005" +
    "\127\001\001\000\002\001\001\000\010\010\130\016\131" +
    "\017\132\001\001\000\002\001\001\000\010\010\234\016" +
    "\131\017\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\144" +
    "\021\142\025\020\026\023\027\022\030\143\001\001\000" +
    "\016\011\233\021\142\025\020\026\023\027\022\030\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\147\022\146\001\001\000\006\012\232\022\146\001\001" +
    "\000\004\013\151\001\001\000\002\001\001\000\006\014" +
    "\155\023\154\001\001\000\002\001\001\000\016\024\206" +
    "\025\020\026\211\027\022\030\212\031\210\001\001\000" +
    "\006\014\205\023\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\024\225\025\020\026\211\027\022\030\212\031\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\020\026\023\027\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AutomatonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AutomatonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AutomatonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private LogManager logger;
  private CParser cparser;
  private MachineModel machineModel;
  private Scope scope;

  // this int is used to determine unique names for anonymous automata
  private static int anonymousCounter;

  AutomatonParser(
      Scanner scanner,
      SymbolFactory sf,
      LogManager pLogger,
      CParser pCparser,
      MachineModel pMachineModel,
      Scope pScope) {
    super(scanner, sf);
    logger = pLogger;
    cparser = pCparser;
    machineModel = pMachineModel;
    scope = pScope;
  }
  
  AutomatonParser(Scanner scanner, SymbolFactory sf, LogManager pLogger) {
    super(scanner, sf);
    logger = pLogger;
    cparser = DummyParser.getInstance();
    machineModel = MachineModel.LINUX32; // won't be used anyway
    scope = DummyScope.getInstance();
  }

  @Override
  public void report_error(String message, Object info) {
    String errorString = message;
    if (info != null) {
      errorString += " near " + info;
    }
    logger.log(Level.WARNING, errorString);
  }

  Automaton generateSkeletonForAssertion(AutomatonBoolExpr pA) throws InvalidAutomatonException {
    AutomatonTransition trans = new AutomatonTransition(
        AutomatonBoolExpr.TRUE, 
        Collections.singletonList(pA),
        Collections.emptyList(),
        Collections.<AutomatonAction>emptyList(),
        "OK");
    AutomatonInternalState okState = new AutomatonInternalState("OK", 
        Collections.singletonList(trans));
    Automaton ret = new Automaton("AnonymousAutomaton" + anonymousCounter++,
                                  Collections.<String, AutomatonVariable>emptyMap(), 
                                  Collections.singletonList(okState), "OK");
    return ret;
  }

  /**
  * Parses a Specification File and returns the Automata found in the file.
  */
  public static List<Automaton> parseAutomatonFile(Path pInputFile, Configuration config, LogManager pLogger, MachineModel pMachine, Scope scope, Language pLanguage) throws InvalidConfigurationException {

    try (Reader input = Files.newBufferedReader(pInputFile, StandardCharsets.UTF_8)) {
      return parseAutomaton(input, Optional.of(pInputFile), config, pLogger, pMachine, scope, pLanguage);

    } catch (IOException e) {
      throw new InvalidConfigurationException("Could not load automaton from file " + e.getMessage(), e);
    }
  }

  /**
  * Parses a Specification File and returns the Automata found in the file.
  */
  public static List<Automaton> parseAutomaton(Reader reader, Optional<Path> pInputFile, Configuration config, LogManager pLogger, MachineModel pMachine, Scope scope, Language pLanguage) throws InvalidConfigurationException {
    ComplexSymbolFactory sf = new ComplexSymbolFactory();
    Scanner scanner = new AutomatonScanner(reader, pInputFile.orElse(Paths.get("")), pLogger, sf);

    AutomatonParser automatonParser;

    switch (pLanguage) {
    case C:
      CParser cparser = CParser.Factory.getParser(pLogger, CParser.Factory.getOptions(config), pMachine);
      automatonParser = new AutomatonParser(scanner, sf, pLogger, cparser, pMachine, scope);
      break;
    default:
      automatonParser = new AutomatonParser(scanner, sf, pLogger);
    }

    Symbol symbol;
    try {
      symbol = automatonParser.parse();
    } catch (Exception e) {
      Throwables.propagateIfPossible(e, InvalidConfigurationException.class);
      throw new InvalidConfigurationException("Could not load automaton from file "
            + " (" + (e.getMessage() != null ? e.getMessage() : e.getClass().getSimpleName()) + ")", e);
    }

    return ((List<Automaton>) symbol.value);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AutomatonParser$actions {
  private final AutomatonParser parser;

  /** Constructor */
  CUP$AutomatonParser$actions(AutomatonParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action_part00000000(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AutomatonParser$result;

      /* select the action based on the action number */
      switch (CUP$AutomatonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Specification initial 
            {
              List<Automaton> RESULT =null;
		Automaton s = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<Automaton> lst = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		List<Automaton> start_val = (List<Automaton>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		RESULT = start_val;
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AutomatonParser$parser.done_parsing();
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              List<Automaton> RESULT =null;
		 RESULT = new LinkedList<Automaton>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Specification ::= Automaton 
            {
              Automaton RESULT =null;
		Automaton a = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = a; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Specification",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Specification ::= Assertion SEMICOLON 
            {
              Automaton RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = parser.generateSkeletonForAssertion(a); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Specification",1, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Automaton ::= OBSERVER Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; b.assertObserverAutomaton(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Automaton ::= CONTROL Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Automaton ::= Body 
            {
              Automaton RESULT =null;
		Automaton b = (Automaton)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Automaton",2, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Body ::= AUTOMATON IDENTIFIER LocalDefs InitDef StateDefs END AUTOMATON 
            {
              Automaton RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		Map<String,AutomatonVariable> vars = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		String init = (String)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonInternalState> states = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new Automaton(id.toString(), vars, states, init); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Body",4, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InitDef ::= INITIAL STATE IDENTIFIER SEMICOLON 
            {
              String RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = id.toString(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InitDef",3, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LocalDefs ::= LocalDef LocalDefs 
            {
              Map<String,AutomatonVariable> RESULT =null;
		AutomatonVariable d = (AutomatonVariable)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		Map<String,AutomatonVariable> lst = (Map<String,AutomatonVariable>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.put(d.getName(), d); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LocalDefs ::= 
            {
              Map<String,AutomatonVariable> RESULT =null;
		 RESULT = new HashMap<String, AutomatonVariable>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDefs",5, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LocalDef ::= LOCAL IDENTIFIER IDENTIFIER EQ ConstantInt SEMICOLON 
            {
              AutomatonVariable RESULT =null;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		AutomatonIntExpr.Constant ci = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonVariable(type.toString(), name.toString()); RESULT.setValue(ci.getIntValue()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("LocalDef",11, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // StateDefs ::= StateDef StateDefs 
            {
              List<AutomatonInternalState> RESULT =null;
		AutomatonInternalState s = (AutomatonInternalState)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonInternalState> lst = (List<AutomatonInternalState>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, s); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // StateDefs ::= 
            {
              List<AutomatonInternalState> RESULT =null;
		 RESULT = new LinkedList<AutomatonInternalState>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDefs",6, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StateDef ::= StateTypeDef STATE StateNonDetDef IDENTIFIER COLON Transitions 
            {
              AutomatonInternalState RESULT =null;
		Boolean type = (Boolean)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		Boolean nd = (Boolean)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		List<AutomatonTransition> ts = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonInternalState(id.toString(), ts, type, nd); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateDef",12, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StateTypeDef ::= TARGET 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateTypeDef",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StateTypeDef ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateTypeDef",13, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StateNonDetDef ::= USEFIRST 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StateNonDetDef ::= USEALL 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StateNonDetDef ::= 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("StateNonDetDef",14, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Transitions ::= Transition Transitions 
            {
              List<AutomatonTransition> RESULT =null;
		AutomatonTransition t = (AutomatonTransition)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonTransition> lst = (List<AutomatonTransition>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0, t); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Transitions ::= 
            {
              List<AutomatonTransition> RESULT =null;
		 RESULT = new LinkedList<AutomatonTransition>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transitions",7, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Transition ::= Bool ARROW Assertions Assume Actions GOTO IDENTIFIER SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-7)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		List<AExpression> a = (List<AExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object follow = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonTransition(trigger, ass, a, acts, follow.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Transition ::= Bool ARROW Assertions Assume Actions ERROR SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AExpression> a = (List<AExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, a, acts, AutomatonInternalState.ERROR, new AutomatonExpression.StringExpression("")); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Transition ::= Bool ARROW Assertions Assume Actions ERROR OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-9)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-7)).value;
		List<AExpression> a = (List<AExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-5)).value;
		Object property = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, a, acts, AutomatonInternalState.ERROR, new AutomatonExpression.StringExpression(property.toString())); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Transition ::= Bool ARROW Assertions Assume Actions STOP SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AExpression> a = (List<AExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, a, acts, AutomatonInternalState.BOTTOM, null); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Transition ::= Bool ARROW Assertions Assume Actions BREAK SEMICOLON 
            {
              AutomatonTransition RESULT =null;
		AutomatonBoolExpr trigger = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-6)).value;
		List<AutomatonBoolExpr> ass = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		List<AExpression> a = (List<AExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		List<AutomatonAction> acts = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonTransition(trigger, ass, a, acts, AutomatonInternalState.BREAK, null); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Transition",15, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Assertions ::= Assertion Assertions 
            {
              List<AutomatonBoolExpr> RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonBoolExpr> lst = (List<AutomatonBoolExpr>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Assertions ::= 
            {
              List<AutomatonBoolExpr> RESULT =null;
		 RESULT = new LinkedList<AutomatonBoolExpr>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertions",8, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Assertion ::= ASSERT Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assertion",16, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Assume ::= ASSUME CURLYEXPR 
            {
              List<AExpression> RESULT =null;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = CParserUtils.convertStatementsToAssumptions(CParserUtils.parseListOfStatements(a.toString(), cparser, scope), machineModel, logger); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assume",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Assume ::= 
            {
              List<AExpression> RESULT =null;
		 RESULT = new ArrayList<AExpression>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Assume",9, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Actions ::= Action Actions 
            {
              List<AutomatonAction> RESULT =null;
		AutomatonAction a = (AutomatonAction)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonAction> lst = (List<AutomatonAction>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Actions ::= 
            {
              List<AutomatonAction> RESULT =null;
		 RESULT = new LinkedList<AutomatonAction>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Actions",10, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Action ::= DO IDENTIFIER EQ InnerInt 
            {
              AutomatonAction RESULT =null;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Assignment(var.toString(), i); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Action ::= PRINT PrintArguments 
            {
              AutomatonAction RESULT =null;
		List<AutomatonExpression> args = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonAction.Print(args); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Action ::= MODIFY OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonAction RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonAction.CPAModification(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Action",17, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrintArguments ::= Expression PrintArguments 
            {
              List<AutomatonExpression> RESULT =null;
		AutomatonExpression a = (AutomatonExpression)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		List<AutomatonExpression> lst = (List<AutomatonExpression>)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 lst.add(0,a); RESULT = lst; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PrintArguments ::= 
            {
              List<AutomatonExpression> RESULT =null;
		 RESULT = new LinkedList<AutomatonExpression>(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("PrintArguments",18, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Int ::= ConstantInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr.Constant c = (AutomatonIntExpr.Constant)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = c; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Int ::= OPEN_BRACKETS Int CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Int ::= IDENTIFIER 
            {
              AutomatonIntExpr RESULT =null;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.VarAccess(x.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Int ::= InnerInt PLUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Plus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Int ::= InnerInt MINUS InnerInt 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Minus(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Int",20, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // InnerInt ::= Int 
            {
              AutomatonIntExpr RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // InnerInt ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonIntExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonIntExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("InnerInt",21, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ConstantInt ::= INTEGER_LITERAL 
            {
              AutomatonIntExpr.Constant RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonIntExpr.Constant(c.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("ConstantInt",19, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Bool ::= TRUE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.TRUE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Bool ::= FALSE 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.FALSE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Bool ::= EXCLAMATION Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Negation(b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Bool ::= OPEN_BRACKETS Bool CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Bool ::= InnerInt EQEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Bool ::= InnerInt NEQ InnerInt 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonIntExpr a = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonIntExpr b = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.IntNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Bool ::= Bool EQEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Bool ::= Bool NEQ Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.BoolNotEqTest(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bool ::= Bool AND Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.And(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bool ::= Bool OR Bool 
            {
              AutomatonBoolExpr RESULT =null;
		AutomatonBoolExpr a = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.Or(a,b); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Bool ::= MATCH STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Bool ::= MATCH CURLYEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeASTComparison(AutomatonASTComparator.generatePatternAST(expr.toString(), cparser, scope)); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Bool ::= MATCH SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchCFAEdgeRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Bool ::= MATCH LABEL STRING_LITERAL 
            {
              AutomatonBoolExpr RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelExact(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Bool ::= MATCH LABEL SQUAREEXPR 
            {
              AutomatonBoolExpr RESULT =null;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonBoolExpr.MatchLabelRegEx(expr.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Bool ::= MATCH ASSERT 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = new AutomatonBoolExpr.MatchJavaAssert(); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Bool ::= MATCH EXIT 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.MatchProgramExit.INSTANCE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Bool ::= MATCH ENTRY 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.MatchProgramEntry.INSTANCE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Bool ::= CHECK OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Bool ::= CHECK OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonBoolExpr.ALLCPAQuery(query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Bool ::= CHECK OPEN_BRACKETS IS_TARGET_STATE CLOSE_BRACKETS 
            {
              AutomatonBoolExpr RESULT =null;
		 RESULT = AutomatonBoolExpr.CheckAllCpasForTargetState.INSTANCE; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Bool",22, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expression ::= Int 
            {
              AutomatonExpression RESULT =null;
		AutomatonIntExpr i = (AutomatonIntExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = i; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",23, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expression ::= Bool 
            {
              AutomatonExpression RESULT =null;
		AutomatonBoolExpr b = (AutomatonBoolExpr)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = b; 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",23, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expression ::= STRING_LITERAL 
            {
              AutomatonExpression RESULT =null;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.peek()).value;
		 RESULT = new AutomatonExpression.StringExpression(lit.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",23, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER OPEN_BRACKETS STRING_LITERAL CLOSE_BRACKETS CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-4)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-2)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",23, RESULT);
            }
          return CUP$AutomatonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expression ::= EVAL OPEN_BRACKETS IDENTIFIER COMMA STRING_LITERAL CLOSE_BRACKETS 
            {
              AutomatonExpression RESULT =null;
		Object cpa = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-3)).value;
		Object query = (Object)((java_cup.runtime.Symbol) CUP$AutomatonParser$stack.elementAt(CUP$AutomatonParser$top-1)).value;
		 RESULT = new AutomatonExpression.CPAQuery(cpa.toString(), query.toString()); 
              CUP$AutomatonParser$result = parser.getSymbolFactory().newSymbol("Expression",23, RESULT);
            }
          return CUP$AutomatonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AutomatonParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AutomatonParser$do_action(
    int                        CUP$AutomatonParser$act_num,
    java_cup.runtime.lr_parser CUP$AutomatonParser$parser,
    java.util.Stack            CUP$AutomatonParser$stack,
    int                        CUP$AutomatonParser$top)
    throws java.lang.Exception
    {
              return CUP$AutomatonParser$do_action_part00000000(
                               CUP$AutomatonParser$act_num,
                               CUP$AutomatonParser$parser,
                               CUP$AutomatonParser$stack,
                               CUP$AutomatonParser$top);
    }
}

}
