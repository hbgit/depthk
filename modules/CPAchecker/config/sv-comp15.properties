# ----------------------------------------------------------------------
# This configuration file uses a sequential combination
# of three different analyses, namely a value analysis,
# a bounded model checking analysis with k-induction,
# and a predicate analysis, in a total of sic different
# configurations.
# This configuration file also specifies the configuration
# to be used for reachability properties on recursive
# programs and for properties regarding memory safety.
# ----------------------------------------------------------------------

# The specification to check in SV-COMP'15
specification = specification/sv-comp-reachability.spc

# The file to which the counterexample is written (required by competition).
counterexample.export.file = ErrorPath.txt

# The file to which the witness is written (required by competition).
counterexample.export.graphml = witness.graphml

# Add an extra option for writting the witness.
parser.transformTokensToLines = true

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Use multi-edges for efficiency reasons.
cpa.composite.aggregateBasicBlocks = true

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The analyses used for (non-recursive) reachability properties.
restartAlgorithm.configFiles = components/sv-comp15--01-valueAnalysis.properties, components/sv-comp15--02-valueAnalysis-itp.properties, components/sv-comp15--03-bmc-k-induction.properties, components/sv-comp15--04-predicateAnalysis.properties, components/sv-comp15--05-predicateAnalysis-bitprecise.properties, components/sv-comp15--recursion.properties::if-recursive

# The analyses used for memory safety properties.
# (everything in this file is then ignored).
memorysafety.config = sv-comp15--memorysafety.properties

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# enable float handling in predicate analysis
cpa.predicate.encodeFloatAs = FLOAT

cpa.predicate.encodeBitvectorAs = RATIONAL

solver.solver = MathSAT5

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true
