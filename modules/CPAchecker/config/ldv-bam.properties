# ------------------------------------------------------------------
# This configuration file is used
# inside Linux Driver Verification Tools by default.
# It uses value analysis and predicate analysis
# with handlePointerAliasing using uninterpreted functions.
# It skips the recursion, ignores function calls by unknown pointer
# and defines a set of nondeterministic functions used in LDV.
# ------------------------------------------------------------------

#include predicateAnalysis-bam.properties
#include valueAnalysis-bam.properties

cpa.bam.blockHeuristic = FunctionPartitioning
cpa.bam.useExtendedPartitioningBuilder = true

cpa.predicate.blk.alwaysAtFunctions = true
cpa.predicate.blk.alwaysAtLoops     = true
# cpa.predicate.blk.threshold = 1
cegar.refiner                       = cpa.value.refiner.ValueAnalysisDelegatingBAMRefiner

cpa.bam.aggressiveCaching = false

CompositeCPA.cpas       = cpa.location.LocationCPA,cpa.callstack.CallstackCPA,cpa.functionpointer.FunctionPointerCPA,cpa.value.ValueAnalysisCPA, cpa.predicate.BAMPredicateCPA,cpa.conditions.path.PathConditionsCPA

# this automaton defines which locations are the error locations
specification = specification/sv-comp-errorlabel.spc

# drop variables from abstract state once they have more then 22 distinct assignments along the current path
cpa.conditions.path.condition                 = AssignmentsInPathCondition

# rev.10385 which added capabilities for a soft and a hard thresholds instead of a single threshold
# cpa.conditions.path.assignments.threshold = 0
cpa.conditions.path.assignments.threshold = 22

# rev.8272 of CPAchecker has added support for global structure initializations
# it has negative effect for drivers, so switch it off
# outdated in rev.14526
# cpa.value.interpolation.ignoreLoopsExitAssumes = false

# cpa.predicate.solver.logAllQueries = true
# cpa.predicate.solver.logfile = smtquery.%03d.smt2

output.disable         = true
statistics.memory      = false
counterexample.export.enabled = true
counterexample.export.file = ErrorPath.txt

# Set 64-bit machine model
analysis.machineModel = Linux64

# Disable counterexample double-check
analysis.checkCounterexamples = false

# Turn on Immutable CFA 3
analysis.summaryEdges = true
analysis.functionPointerCalls = true
cpa.callstack.skipRecursion = true

# Set several custom (LDV-specific) nondet functions
cpa.predicate.nondetFunctions = nondet_int,sscanf,random,ldv_undef_ptr,ldv_undef_int,ldv_undef_ulong

# Ignore function calls by pointer if the value of pointer variable is not known by FunctionPointerCPA
cpa.functionpointer.ignoreUnknownFunctionPointerCalls=true

# Workaround for #193
# (Conflicting PredicateCPA and FunctionPointerCPA with ignoreUnknownFunctionPointerCalls heuristic)
cpa.predicate.trackFunctionPointers=false

# Pointer analysis with UF options
cpa.predicate.handlePointerAliasing = true

cpa.predicate.defaultArrayLength = 1
cpa.predicate.maxArrayLength = 1


# Setting the option to make memory allocations always return correct addresses
cpa.predicate.memoryAllocationsAlwaysSucceed = false

# New heuristic for cillified files: pre-populate small structures with all their fields
cpa.predicate.maxPreFilledAllocationSize = 0

# If a refined path has been already ever refined (not only last time), the RefinedFaild exception was thrown
cpa.value.refinement.storeAllRefinedPaths = true

# Predicate optimisation
cpa.predicate.checkBlockFeasibility=true

# Avoid typically huge amount of messages about dead code
cfa.showDeadCode = false
