# Use predicateAnalysis as safety analysis.
#include predicateAnalysis.properties

# Use this configuration as configuration for termination analysis.
termination.config = sv-comp17--termination.properties

# Do not use default specification.
specification =

# Termination analysis requires the TerminationAlgorithm.
analysis.algorithm.termination = true

# Insert TerminationCPA in the stack of CPAs. 
TerminationCPA.cpa = cpa.composite.CompositeCPA
ARGCPA.cpa = cpa.termination.TerminationCPA

# Strengthen PredicateAbstractState with ranking relation from TerminationState.
cpa.predicate.strengthenWithFormulaReportingStates = true

# Add invariants generated by the LassoRanker library to the precision
cpa.predicate.invariants.addToPrecision = true

# The TerminationCPA adds variables that are relevant, but would not be tracked. 
cpa.predicate.ignoreIrrelevantVariables = false

# The termination analysis requires TerminationARGBasedRefiner as wrapper.
cegar.refiner = cpa.termination.TerminationARGBasedRefiner
cpa.termination.refiner = cpa.predicate.PredicateRefiner

# Counterexample for terminationAnalysis is not yet implemented
analysis.checkCounterexamples = false

cpa.predicate.memoryAllocationFunctions = malloc, __kmalloc, kmalloc, __builtin_alloca

limits.time.cpu::required = 900
