#include includes/valueAnalysis.properties

# specification to find memory related problems
specification = specification/cpalien-leaks.spc, specification/TerminatingFunctions.spc

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.smg.SMGCPA

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = bfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false
analysis.traversal.useLoopstack           = true

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe
cpa.smg.guessSizeOfUnknownMemorySize = true
cpa.smg.trackPredicates = true
cpa.smg.verifyPredicates = true
cpa.smg.exportSMGwhen = NEVER
cpa.smg.exportSMG.file = smg-%s.dot
cpa.smg.externalAllocationFunction = ldv_undef_ptr,external_allocated_data,ext_allocation
cpa.smg.externalAllocationSize = 1000000
cpa.smg.enableHeapAbstraction = true
coverage.enabled = true
# print coverage info to file
coverage.export = true
coverage.file = coverage.info

cpa.smg.stop = END_BLOCK
cpa.composite.aggregateBasicBlocks = false

# Disable all output files except the witness.
output.disable = false

# Write witness to file (required by competition).
counterexample.export.graphml=witness.graphml

# simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# CFA branch swapping is bad for witnesses
cfa.allowBranchSwapping = false

# Do not export constant values for pointers
# if an external tool is supposed to check the witness:
# the concrete value we use might not make sense in a real setting
counterexample.export.assumptions.includeConstantsForPointers = false

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
memorysafety.config = smg-ldv.properties

# Memory allocation functions
cpa.smg.memoryAllocationFunctions = malloc,__kmalloc,kmalloc,kzalloc,kzalloc_node,ldv_zalloc,ldv_malloc

# Array allocation functions
cpa.smg.arrayAllocationFunctions = calloc,kmalloc_array,kcalloc

# Allocation functions which set memory to zero
cpa.smg.zeroingMemoryAllocation = calloc,kzalloc,kcalloc,kzalloc_node,ldv_zalloc

# Deallocation functions
cpa.smg.deallocationFunctions = free,kfree,kfree_const
