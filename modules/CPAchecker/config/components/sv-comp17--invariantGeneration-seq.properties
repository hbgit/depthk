# ----------------------------------------------------------------------
# This configuration file configures a sequence of value analysis and
# predicate analysis for invariant generation for SV-COMP'17.
# ----------------------------------------------------------------------

# ************** SV-COMP'17 specifics ***********************

# The specification to check in SV-COMP'17
specification = ../specification/sv-comp-reachability.spc

# The file to which the witness is written (required by competition).
counterexample.export.graphml = violation-witness.graphml
cpa.arg.proofWitness = correctness-witness.graphml
# Compression is not supported by UltimateAutomizer
counterexample.export.compressWitness = false

# Disable all output except the error path.
output.disable = true

# Disable statistics for memory consumption.
statistics.memory = false

# Multi edges are not important for our efficiency,
# but prevent precise witnesses and concurrency analysis
cpa.composite.aggregateBasicBlocks = false

# Simplified CFA is bad for witnesses
cfa.simplifyCfa = false

# CFA branch swapping is bad for witnesses
cfa.allowBranchSwapping = false

# Do not export constant values for pointers
# if an external tool is supposed to check the witness:
# the concrete value we use might not make sense in a real setting
counterexample.export.assumptions.includeConstantsForPointers = false

# Use sequential combination of analyses.
analysis.restartAfterUnknown = true

# The analyses used for (non-recursive) reachability properties.
restartAlgorithm.configFiles = sv-comp17--invariantGeneration-seq-valueAnalysis.properties, sv-comp17--invariantGeneration-seq-predicateAnalysis-bitprecise.properties

limits.time.cpu = 900s
limits.time.cpu::required = 900 

# Tell all analyses to skip (non-explicit) recursion
analysis.summaryEdges = true
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# enable float handling in predicate analysis
cpa.predicate.encodeFloatAs = FLOAT

cpa.predicate.encodeBitvectorAs = BITVECTOR

solver.solver = MathSAT5

# malloc never returns null according to SV-Comp rules
cpa.predicate.memoryAllocationsAlwaysSucceed = true

# Run until state space is fully explored
cpa.automaton.breakOnTargetState = 0


