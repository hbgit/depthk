# --------------------------------------------------------------------
# This configuration file uses value analysis and a predicate analysis
# in parallel. Both analysis perform refinement selection, and inter-
# analysis refinement selection is performed for deciding which
# analysis to refine for a given infeasible error path.
# A bit-precise predicate analysis is used to check counterexamples.
#
# This is a variant of the SV-COMP'16 submission "CPA-RefSel".
# --------------------------------------------------------------------

#include valueAnalysis.properties

# main process
output.disable    = true
statistics.memory = false

# specification
specification = specification/sv-comp-reachability.spc

# witness-support and witness-optimization (disabled, only relevant for SV-COMP)
# cpa.arg.errorPath.file                                        = ErrorPath.txt
# cpa.arg.errorPath.graphml                                     = witness.graphml
# cfa.useMultiEdges                                             = false
# cfa.simplifyCfa                                               = false
# cfa.allowBranchSwapping                                       = false
# counterexample.export.assumptions.includeConstantsForPointers = false

# CPAs in use
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.value.ValueAnalysisCPA, cpa.predicate.PredicateCPA

# options for whole analysis
analysis.checkCounterexamples                         = true
analysis.summaryEdges                                 = true
cpa.callstack.skipVoidRecursion                       = true
cpa.callstack.skipFunctionPointerRecursion            = true
cpa.functionpointer.ignoreUnknownFunctionPointerCalls = true

# options for value analysis
cpa.value.abstraction.iterationThreshold = 4096
cpa.value.refinement.prefixPreference    = DOMAIN_MIN,LENGTH_MAX
cpa.value.refinement.restart             = ROOT
# adding assumption from both the value and the predicate analysis make the CEX-check fail,
# so do not add assumptions from the value analysis to circumvent this behavior
cpa.value.refinement.addAssumptionsToCex = false

# options for predicate analysis
cpa.predicate.abstraction.computation                   = BOOLEAN
cpa.predicate.blk.alwaysAtJoin                          = true
cpa.predicate.blk.alwaysAtFunctions                     = false
cpa.predicate.blk.alwaysAtLoops                         = true
cpa.predicate.refinement.performInitialStaticRefinement = false
cpa.predicate.refinement.prefixPreference               = DOMAIN_MIN,PIVOT_MIN
cpa.predicate.refinement.restartAfterRefinements        = 1
cpa.predicate.memoryAllocationsAlwaysSucceed            = true
cpa.predicate.defaultArrayLength                        = 1
cpa.predicate.maxArrayLength                            = 5
cpa.predicate.precision.sharing                         = SCOPE

# options for combination of VA and PA
cegar.refiner                = cpa.value.refiner.ValueAnalysisDelegatingRefiner
cegar.useRefinementSelection = true
cegar.domainScoreThreshold   = 4

# counterexample-check
counterexample.checker.config = cex-checks/predicateAnalysis-as-bitprecise-cex-check.properties

