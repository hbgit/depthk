# ----------------------------------------------------------------------
# This configuration file uses a combination of value-value analysis
# and symbolic memory graphs to verify memory safety properties.
# ----------------------------------------------------------------------

#include includes/valueAnalysis.properties

# specification to find memory related problems
specification = specification/cpalien-leaks.spc, specification/TerminatingFunctions.spc

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.value.ValueAnalysisCPA, cpa.smg.SMGCPA, cpa.conditions.global.GlobalConditionsCPA, cpa.assumptions.storage.AssumptionStorageCPA

analysis.unknownAsTrue = true

cpa.conditions.global.reached.size = 5000

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

analysis.traversal.order                  = bfs
analysis.traversal.useReversePostorder    = false
analysis.traversal.useCallstack           = false

cpa.smg.enableMallocFail       = false
cpa.smg.handleUnknownFunctions = assume_safe

cpa.composite.aggregateBasicBlocks = false

# Disable all output files except the error path.
output.disable = true

# Write counterexample to file (required by competition).
counterexample.export.file = ErrorPath.txt

# Disable statistics for memory consumption.
statistics.memory = false

# This is the configuration used when verifying memory safety properties (actually this configuration).
memorysafety.config = sv-comp14--memorysafety.properties
