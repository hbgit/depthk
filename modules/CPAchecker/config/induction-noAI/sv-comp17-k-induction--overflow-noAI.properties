# ----------------------------------------------------------------------
# This configuration file enables overflow checking with k-Induction
# ----------------------------------------------------------------------

#include ../bmc-induction-noAI.properties

CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA, cpa.assumptions.storage.AssumptionStorageCPA, cpa.bounds.BoundsCPA, cpa.programcounter.ProgramCounterCPA, cpa.value.ValueAnalysisCPA, cpa.invariants.InvariantsCPA

# The specification to check in SV-COMP'17
specification = ../specification/sv-comp-reachability.spc

# SV-COMP17 options:
counterexample.export.file=ErrorPath.txt
counterexample.export.graphml=violation-witness.graphml
bmc.invariantsExport=correctness-witness.graphml
output.disable=true
statistics.memory=false
cpa.callstack.skipVoidRecursion=true
cpa.callstack.skipFunctionPointerRecursion=true
cpa.predicate.encodeFloatAs=FLOAT
cpa.predicate.memoryAllocationsAlwaysSucceed=true
cpa.composite.aggregateBasicBlocks=false
bmc.addInvariantsByInduction=false
solver.solver=MATHSAT5
cpa.predicate.encodeBitvectorAs=BITVECTOR

# This is the configuration used when verifying the overflow property
overflow.config = ../sv-comp17--k-induction-overflow.properties

cpa.invariants.merge = SEP
cpa.invariants.interestingVariableLimit = 0
cpa.invariants.abstractionStateFactory = NEVER
cpa.invariants.analyzeTargetPathsOnly = false
cpa.invariants.analyzeRelevantVariablesOnly = false
cpa.invariants.maximumFormulaDepth = 1

# Simplifications must be turned off; they would hide the overflows
cfa.simplifyConstExpressions=false

# checking conterexamples, esp. with CBMC does not make sense
analysis.checkCounterexamples = false

bmc.induction = false
